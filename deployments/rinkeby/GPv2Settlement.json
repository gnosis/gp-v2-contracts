{
  "address": "0x8B63DeF1214563DBed4576B569F7d5e9f7aaa677",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GPv2Authentication",
          "name": "authenticator_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "Interaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "OrderInvalidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "solver",
          "type": "address"
        }
      ],
      "name": "Settlement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SIMULATE_DELEGATECALL_INTERNAL_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowanceManager",
      "outputs": [
        {
          "internalType": "contract GPv2AllowanceManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authenticator",
      "outputs": [
        {
          "internalType": "contract GPv2Authentication",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "filledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getStorageAt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "invalidateOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "preSignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "name": "revertWith",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "buffer",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "setLength",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "signed",
          "type": "bool"
        }
      ],
      "name": "setPreSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "clearingPrices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sellTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeDiscount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct GPv2Trade.Data[]",
          "name": "trades",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GPv2Interaction.Data[][3]",
          "name": "interactions",
          "type": "tuple[][3]"
        },
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "filledAmounts",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes[]",
              "name": "preSignatures",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct GPv2Settlement.OrderRefunds",
          "name": "orderRefunds",
          "type": "tuple"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "calldataPayload",
          "type": "bytes"
        }
      ],
      "name": "simulateDelegatecall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "calldataPayload",
          "type": "bytes"
        }
      ],
      "name": "simulateDelegatecallInternal",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9414074a00d8e1ea5df73235e190b361a0ac05a372117983d9a02f4a1ff967c1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1",
    "contractAddress": null,
    "transactionIndex": 8,
    "gasUsed": "2825677",
    "logsBloom": "0x
    "blockHash": "0xff00a6074f4c26dc9b4e27ff3f2ca78b6c9ef970e607632d475b37ca53d57ad0",
    "transactionHash": "0x9414074a00d8e1ea5df73235e190b361a0ac05a372117983d9a02f4a1ff967c1",
    "logs": [],
    "blockNumber": 8037341,
    "cumulativeGasUsed": "3935385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD368E836f0548678Bd46D8Bb3183f25ef476D75d"
  ],
  "solcInputHash": "712c481058f897c71953a39a13fda8af",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GPv2Authentication\",\"name\":\"authenticator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"Interaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"OrderInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"Settlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SIMULATE_DELEGATECALL_INTERNAL_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowanceManager\",\"outputs\":[{\"internalType\":\"contract GPv2AllowanceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authenticator\",\"outputs\":[{\"internalType\":\"contract GPv2Authentication\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"filledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"invalidateOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"preSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"revertWith\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buffer\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setLength\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"name\":\"setPreSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"clearingPrices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sellTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDiscount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GPv2Trade.Data[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct GPv2Interaction.Data[][3]\",\"name\":\"interactions\",\"type\":\"tuple[][3]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"filledAmounts\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"preSignatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct GPv2Settlement.OrderRefunds\",\"name\":\"orderRefunds\",\"type\":\"tuple\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateDelegatecall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateDelegatecallInternal\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gnosis Developers\",\"events\":{\"Interaction(address,uint256,bytes4)\":{\"details\":\"Event emitted for each executed interaction. For gas effeciency, only the interaction calldata selector (first 4 bytes) is included in the event. For interactions without calldata or whose calldata is shorter than 4 bytes, the selector will be `0`.\"},\"OrderInvalidated(address,bytes)\":{\"details\":\"Event emitted when an order is invalidated.\"},\"Settlement(address)\":{\"details\":\"Event emitted when a settlement complets\"},\"Trade(address,address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"Event emitted for each executed trade.\"}},\"kind\":\"dev\",\"methods\":{\"getStorageAt(uint256,uint256)\":{\"details\":\"Reads `length` bytes of storage in the currents contract\",\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"invalidateOrder(bytes)\":{\"details\":\"Invalidate onchain an order that has been signed offline.\",\"params\":{\"orderUid\":\"The unique identifier of the order that is to be made invalid after calling this function. The user that created the order must be the the sender of this message. See [`extractOrderUidParams`] for details on orderUid.\"}},\"setPreSignature(bytes,bool)\":{\"details\":\"Sets a presignature for the specified order UID.\",\"params\":{\"orderUid\":\"The unique identifier of the order to pre-sign.\"}},\"settle(address[],uint256[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,uint256,bytes)[],(address,uint256,bytes)[][3],(bytes[],bytes[]))\":{\"details\":\"Settle the specified orders at a clearing price. Note that it is the responsibility of the caller to ensure that all GPv2 invariants are upheld for the input settlement, otherwise this call will revert. Namely: - All orders are valid and signed - Accounts have sufficient balance and approval. - Settlement contract has sufficient balance to execute trades. Note   this implies that the accumulated fees held in the contract can also   be used for settlement. This is OK since:   - Solvers need to be authorized   - Misbehaving solvers will be slashed for abusing accumulated fees for     settlement   - Critically, user orders are entirely protected\",\"params\":{\"clearingPrices\":\"An array of clearing prices where the `i`-th price is for the `i`-th token in the [`tokens`] array.\",\"interactions\":\"Smart contract interactions split into three separate lists to be run before the settlement, during the settlement and after the settlement respectively.\",\"orderRefunds\":\"Order refunds for clearing storage related to expired orders.\",\"tokens\":\"An array of ERC20 tokens to be traded in the settlement. Trades encode tokens as indices into this array.\",\"trades\":\"Trades for signed orders.\"}},\"simulateDelegatecall(address,bytes)\":{\"details\":\"Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"simulateDelegatecallInternal(address,bytes)\":{\"details\":\"Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message concatenated with the success flag of the inner call as a last byte.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}}},\"stateVariables\":{\"allowanceManager\":{\"details\":\"The allowance manager which has access to order funds. This contract is created during deployment\"},\"authenticator\":{\"details\":\"The authenticator is used to determine who can call the settle function. That is, only authorised solvers have the ability to invoke settlements. Any valid authenticator implements an isSolver method called by the onlySolver modifier below.\"},\"filledAmount\":{\"details\":\"Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed.\"}},\"title\":\"Gnosis Protocol v2 Settlement Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/GPv2Settlement.sol\":\"GPv2Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.7.0;\\n\\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\\ninterface ViewStorageAccessible {\\n    /**\\n     * @dev Same as `simulateDelegatecall` on StorageAccessible. Marked as view so that it can be called from external contracts\\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) external view returns (bytes memory);\\n}\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\ncontract StorageAccessible {\\n    bytes4 public constant SIMULATE_DELEGATECALL_INTERNAL_SELECTOR = bytes4(\\n        keccak256(\\\"simulateDelegatecallInternal(address,bytes)\\\")\\n    );\\n\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) public returns (bytes memory response) {\\n        bytes memory innerCall = abi.encodeWithSelector(\\n            SIMULATE_DELEGATECALL_INTERNAL_SELECTOR,\\n            targetContract,\\n            calldataPayload\\n        );\\n        (, response) = address(this).call(innerCall);\\n        bool innerSuccess = response[response.length - 1] == 0x01;\\n        setLength(response, response.length - 1);\\n        if (innerSuccess) {\\n            return response;\\n        } else {\\n            revertWith(response);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message\\n     * concatenated with the success flag of the inner call as a last byte.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecallInternal(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) public returns (bytes memory response) {\\n        bool success;\\n        (success, response) = targetContract.delegatecall(\\n            calldataPayload\\n        );\\n        revertWith(abi.encodePacked(response, success));\\n    }\\n\\n    function revertWith(bytes memory response) public pure {\\n        assembly {\\n            revert(add(response, 0x20), mload(response))\\n        }\\n    }\\n\\n    function setLength(bytes memory buffer, uint256 length) public pure {\\n        assembly {\\n            mstore(buffer, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc8b52a0614f7537b65d6db188ffc5b16fd23b71d9174cb29f8020c9bf3ccb333\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"src/contracts/GPv2AllowanceManager.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/GPv2TradeExecution.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Allowance Manager Contract\\n/// @author Gnosis Developers\\ncontract GPv2AllowanceManager {\\n    using GPv2TradeExecution for GPv2TradeExecution.Data;\\n\\n    /// @dev The recipient of all transfers made by the allowance manager. The\\n    /// recipient is set at creation time and cannot change.\\n    address private immutable recipient;\\n\\n    constructor() {\\n        recipient = msg.sender;\\n    }\\n\\n    /// @dev Modifier that ensures that a function can only be called by the\\n    /// recipient of this contract.\\n    modifier onlyRecipient {\\n        require(msg.sender == recipient, \\\"GPv2: not allowance recipient\\\");\\n        _;\\n    }\\n\\n    /// @dev Transfers all sell amounts for the executed trades from their\\n    /// owners to the caller.\\n    ///\\n    /// This function reverts if:\\n    /// - The caller is not the recipient of the allowance manager\\n    /// - Any ERC20 transfer fails\\n    ///\\n    /// @param trades The executed trades whose sell amounts need to be\\n    /// transferred in.\\n    function transferIn(GPv2TradeExecution.Data[] calldata trades)\\n        external\\n        onlyRecipient\\n    {\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            GPv2TradeExecution.transferSellAmountToRecipient(\\n                trades[i],\\n                msg.sender\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01abf5a8393fdf48528b05b105ea0026986cd3572411d4d416b0204a37b7f6cf\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/GPv2Settlement.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@gnosis.pm/util-contracts/contracts/StorageAccessible.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./GPv2AllowanceManager.sol\\\";\\nimport \\\"./interfaces/GPv2Authentication.sol\\\";\\nimport \\\"./libraries/GPv2Interaction.sol\\\";\\nimport \\\"./libraries/GPv2Order.sol\\\";\\nimport \\\"./libraries/GPv2Trade.sol\\\";\\nimport \\\"./libraries/GPv2TradeExecution.sol\\\";\\nimport \\\"./mixins/GPv2Signing.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Settlement Contract\\n/// @author Gnosis Developers\\ncontract GPv2Settlement is GPv2Signing, ReentrancyGuard, StorageAccessible {\\n    using GPv2Order for bytes;\\n    using GPv2TradeExecution for GPv2TradeExecution.Data;\\n    using SafeMath for uint256;\\n\\n    /// @dev Data used for freeing storage and claiming a gas refund.\\n    struct OrderRefunds {\\n        bytes[] filledAmounts;\\n        bytes[] preSignatures;\\n    }\\n\\n    /// @dev The authenticator is used to determine who can call the settle function.\\n    /// That is, only authorised solvers have the ability to invoke settlements.\\n    /// Any valid authenticator implements an isSolver method called by the onlySolver\\n    /// modifier below.\\n    GPv2Authentication public immutable authenticator;\\n\\n    /// @dev The allowance manager which has access to order funds. This\\n    /// contract is created during deployment\\n    GPv2AllowanceManager public immutable allowanceManager;\\n\\n    /// @dev Map each user order by UID to the amount that has been filled so\\n    /// far. If this amount is larger than or equal to the amount traded in the\\n    /// order (amount sold for sell orders, amount bought for buy orders) then\\n    /// the order cannot be traded anymore. If the order is fill or kill, then\\n    /// this value is only used to determine whether the order has already been\\n    /// executed.\\n    mapping(bytes => uint256) public filledAmount;\\n\\n    /// @dev Event emitted for each executed trade.\\n    event Trade(\\n        address indexed owner,\\n        IERC20 sellToken,\\n        IERC20 buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 feeAmount,\\n        bytes orderUid\\n    );\\n\\n    /// @dev Event emitted for each executed interaction.\\n    ///\\n    /// For gas effeciency, only the interaction calldata selector (first 4\\n    /// bytes) is included in the event. For interactions without calldata or\\n    /// whose calldata is shorter than 4 bytes, the selector will be `0`.\\n    event Interaction(address indexed target, uint256 value, bytes4 selector);\\n\\n    /// @dev Event emitted when a settlement complets\\n    event Settlement(address indexed solver);\\n\\n    /// @dev Event emitted when an order is invalidated.\\n    event OrderInvalidated(address indexed owner, bytes orderUid);\\n\\n    constructor(GPv2Authentication authenticator_) {\\n        authenticator = authenticator_;\\n        allowanceManager = new GPv2AllowanceManager();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // NOTE: Include an empty receive function so that the settlement\\n        // contract can receive Ether from contract interactions.\\n    }\\n\\n    /// @dev This modifier is called by settle function to block any non-listed\\n    /// senders from settling batches.\\n    modifier onlySolver {\\n        require(authenticator.isSolver(msg.sender), \\\"GPv2: not a solver\\\");\\n        _;\\n    }\\n\\n    /// @dev Settle the specified orders at a clearing price. Note that it is\\n    /// the responsibility of the caller to ensure that all GPv2 invariants are\\n    /// upheld for the input settlement, otherwise this call will revert.\\n    /// Namely:\\n    /// - All orders are valid and signed\\n    /// - Accounts have sufficient balance and approval.\\n    /// - Settlement contract has sufficient balance to execute trades. Note\\n    ///   this implies that the accumulated fees held in the contract can also\\n    ///   be used for settlement. This is OK since:\\n    ///   - Solvers need to be authorized\\n    ///   - Misbehaving solvers will be slashed for abusing accumulated fees for\\n    ///     settlement\\n    ///   - Critically, user orders are entirely protected\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// Trades encode tokens as indices into this array.\\n    /// @param clearingPrices An array of clearing prices where the `i`-th price\\n    /// is for the `i`-th token in the [`tokens`] array.\\n    /// @param trades Trades for signed orders.\\n    /// @param interactions Smart contract interactions split into three\\n    /// separate lists to be run before the settlement, during the settlement\\n    /// and after the settlement respectively.\\n    /// @param orderRefunds Order refunds for clearing storage related to\\n    /// expired orders.\\n    function settle(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades,\\n        GPv2Interaction.Data[][3] calldata interactions,\\n        OrderRefunds calldata orderRefunds\\n    ) external nonReentrant onlySolver {\\n        executeInteractions(interactions[0]);\\n\\n        GPv2TradeExecution.Data[] memory executedTrades =\\n            computeTradeExecutions(tokens, clearingPrices, trades);\\n\\n        allowanceManager.transferIn(executedTrades);\\n\\n        executeInteractions(interactions[1]);\\n\\n        transferOut(executedTrades);\\n\\n        executeInteractions(interactions[2]);\\n\\n        claimOrderRefunds(orderRefunds);\\n\\n        emit Settlement(msg.sender);\\n    }\\n\\n    /// @dev Invalidate onchain an order that has been signed offline.\\n    ///\\n    /// @param orderUid The unique identifier of the order that is to be made\\n    /// invalid after calling this function. The user that created the order\\n    /// must be the the sender of this message. See [`extractOrderUidParams`]\\n    /// for details on orderUid.\\n    function invalidateOrder(bytes calldata orderUid) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: caller does not own order\\\");\\n        filledAmount[orderUid] = uint256(-1);\\n        emit OrderInvalidated(owner, orderUid);\\n    }\\n\\n    /// @dev Process all trades one at a time returning the computed net in and\\n    /// out transfers for the trades.\\n    ///\\n    /// This method reverts if processing of any single trade fails. See\\n    /// [`computeTradeExecution`] for more details.\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// @param clearingPrices An array of token clearing prices.\\n    /// @param trades Trades for signed orders.\\n    /// @return executedTrades Array of executed trades.\\n    function computeTradeExecutions(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades\\n    ) internal returns (GPv2TradeExecution.Data[] memory executedTrades) {\\n        RecoveredOrder memory recoveredOrder = allocateRecoveredOrder();\\n\\n        executedTrades = new GPv2TradeExecution.Data[](trades.length);\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            GPv2Trade.Data calldata trade = trades[i];\\n\\n            recoverOrderFromTrade(recoveredOrder, tokens, trade);\\n            computeTradeExecution(\\n                recoveredOrder,\\n                clearingPrices[trade.sellTokenIndex],\\n                clearingPrices[trade.buyTokenIndex],\\n                trade.executedAmount,\\n                trade.feeDiscount,\\n                executedTrades[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Compute the in and out transfer amounts for a single trade.\\n    /// This function reverts if:\\n    /// - The order has expired\\n    /// - The order's limit price is not respected\\n    /// - The order gets over-filled\\n    /// - The fee discount is larger than the executed fee\\n    ///\\n    /// @param recoveredOrder The recovered order to process.\\n    /// @param sellPrice The price of the order's sell token.\\n    /// @param buyPrice The price of the order's buy token.\\n    /// @param executedAmount The portion of the order to execute. This will be\\n    /// ignored for fill-or-kill orders.\\n    /// @param feeDiscount The discount to apply to the final executed fees.\\n    /// @param executedTrade Memory location for computed executed trade data.\\n    function computeTradeExecution(\\n        RecoveredOrder memory recoveredOrder,\\n        uint256 sellPrice,\\n        uint256 buyPrice,\\n        uint256 executedAmount,\\n        uint256 feeDiscount,\\n        GPv2TradeExecution.Data memory executedTrade\\n    ) internal {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n        bytes memory orderUid = recoveredOrder.uid;\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(order.validTo >= block.timestamp, \\\"GPv2: order expired\\\");\\n\\n        executedTrade.owner = recoveredOrder.owner;\\n        executedTrade.receiver = order.receiver;\\n        executedTrade.sellToken = order.sellToken;\\n        executedTrade.buyToken = order.buyToken;\\n\\n        // NOTE: The following computation is derived from the equation:\\n        // ```\\n        // amount_x * price_x = amount_y * price_y\\n        // ```\\n        // Intuitively, if a chocolate bar is 0,50\\u20ac and a beer is 4\\u20ac, 1 beer\\n        // is roughly worth 8 chocolate bars (`1 * 4 = 8 * 0.5`). From this\\n        // equation, we can derive:\\n        // - The limit price for selling `x` and buying `y` is respected iff\\n        // ```\\n        // limit_x * price_x >= limit_y * price_y\\n        // ```\\n        // - The executed amount of token `y` given some amount of `x` and\\n        //   clearing prices is:\\n        // ```\\n        // amount_y = amount_x * price_x / price_y\\n        // ```\\n\\n        require(\\n            order.sellAmount.mul(sellPrice) >= order.buyAmount.mul(buyPrice),\\n            \\\"GPv2: limit price not respected\\\"\\n        );\\n\\n        uint256 executedSellAmount;\\n        uint256 executedBuyAmount;\\n        uint256 executedFeeAmount;\\n        uint256 currentFilledAmount;\\n\\n        // NOTE: Don't use `SafeMath.div` or `SafeMath.sub` anywhere here as it\\n        // allocates a string even if it does not revert. Additionally, `div`\\n        // only checks that the divisor is non-zero and `revert`s in that case\\n        // instead of consuming all of the remaining transaction gas when\\n        // dividing by zero, so no extra checks are needed for those operations.\\n\\n        if (order.kind == GPv2Order.SELL) {\\n            if (order.partiallyFillable) {\\n                executedSellAmount = executedAmount;\\n                executedFeeAmount =\\n                    order.feeAmount.mul(executedSellAmount) /\\n                    order.sellAmount;\\n            } else {\\n                executedSellAmount = order.sellAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedBuyAmount = executedSellAmount.mul(sellPrice) / buyPrice;\\n\\n            currentFilledAmount = filledAmount[orderUid].add(\\n                executedSellAmount\\n            );\\n            require(\\n                currentFilledAmount <= order.sellAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        } else {\\n            if (order.partiallyFillable) {\\n                executedBuyAmount = executedAmount;\\n                executedFeeAmount =\\n                    order.feeAmount.mul(executedBuyAmount) /\\n                    order.buyAmount;\\n            } else {\\n                executedBuyAmount = order.buyAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedSellAmount = executedBuyAmount.mul(buyPrice) / sellPrice;\\n\\n            currentFilledAmount = filledAmount[orderUid].add(executedBuyAmount);\\n            require(\\n                currentFilledAmount <= order.buyAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        }\\n\\n        require(\\n            feeDiscount <= executedFeeAmount,\\n            \\\"GPv2: fee discount too large\\\"\\n        );\\n        executedFeeAmount = executedFeeAmount - feeDiscount;\\n\\n        executedTrade.sellAmount = executedSellAmount.add(executedFeeAmount);\\n        executedTrade.buyAmount = executedBuyAmount;\\n\\n        filledAmount[orderUid] = currentFilledAmount;\\n        emit Trade(\\n            executedTrade.owner,\\n            executedTrade.sellToken,\\n            executedTrade.buyToken,\\n            executedTrade.sellAmount,\\n            executedTrade.buyAmount,\\n            executedFeeAmount,\\n            orderUid\\n        );\\n    }\\n\\n    /// @dev Execute a list of arbitrary contract calls from this contract.\\n    /// @param interactions The list of interactions to execute.\\n    function executeInteractions(GPv2Interaction.Data[] calldata interactions)\\n        internal\\n    {\\n        GPv2Interaction.Data calldata interaction;\\n        for (uint256 i; i < interactions.length; i++) {\\n            interaction = interactions[i];\\n\\n            // To prevent possible attack on user funds, we explicitly disable\\n            // any interactions with AllowanceManager contract.\\n            require(\\n                interaction.target != address(allowanceManager),\\n                \\\"GPv2: forbidden interaction\\\"\\n            );\\n            GPv2Interaction.execute(interaction);\\n\\n            emit Interaction(\\n                interaction.target,\\n                interaction.value,\\n                GPv2Interaction.selector(interaction)\\n            );\\n        }\\n    }\\n\\n    /// @dev Transfers all buy amounts for the executed trades from the\\n    /// settlement contract to the order owners. This function reverts if any of\\n    /// the ERC20 operations fail.\\n    ///\\n    /// @param trades The executed trades whose buy amounts need to be\\n    /// transferred out.\\n    function transferOut(GPv2TradeExecution.Data[] memory trades) internal {\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            trades[i].transferBuyAmountToOwner();\\n        }\\n    }\\n\\n    /// @dev Claims order gas refunds.\\n    ///\\n    /// @param orderRefunds Order refund data for freeing storage.\\n    function claimOrderRefunds(OrderRefunds calldata orderRefunds) internal {\\n        freeOrderStorage(orderRefunds.filledAmounts, filledAmount);\\n        freeOrderStorage(orderRefunds.preSignatures, preSignature);\\n    }\\n\\n    /// @dev Claims refund for the specified storage and order UIDs.\\n    ///\\n    /// This method reverts if any of the orders are still valid.\\n    ///\\n    /// @param orderUids Order refund data for freeing storage.\\n    /// @param orderStorage Order storage mapped on a UID.\\n    function freeOrderStorage(\\n        bytes[] calldata orderUids,\\n        mapping(bytes => uint256) storage orderStorage\\n    ) internal {\\n        for (uint256 i = 0; i < orderUids.length; i++) {\\n            bytes calldata orderUid = orderUids[i];\\n\\n            (, , uint32 validTo) = orderUid.extractOrderUidParams();\\n            // solhint-disable-next-line not-rely-on-time\\n            require(validTo < block.timestamp, \\\"GPv2: order still valid\\\");\\n\\n            orderStorage[orderUid] = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3414858fb32271bc647870b11d36cd04ac0b9daa9a0875ef6809e4681bd061c1\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interfaces/GPv2Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Authentication Interface\\n/// @author Gnosis Developers\\ninterface GPv2Authentication {\\n    /// @dev determines whether the provided address is an authenticated solver.\\n    /// @param prospectiveSolver the address of prospective solver.\\n    /// @return true when prospectiveSolver is an authenticated solver, otherwise false.\\n    function isSolver(address prospectiveSolver) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xffbd3b9ca8cb5b86c3d7f7ce706755dd6acdc86ef9acefcb5bae375ea50628e3\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interfaces/GPv2EIP1271.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nlibrary GPv2EIP1271 {\\n    /// @dev Value returned by a call to `isValidSignature` if the signature\\n    /// was verified successfully. The value is defined in EIP-1271 as:\\n    /// bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n}\\n\\n/// @title EIP1271 Interface\\n/// @dev Standardized interface for an implementation of smart contract\\n/// signatures as described in EIP-1271. The code that follows is identical to\\n/// the code in the standard with the exception of formatting and syntax\\n/// changes to adapt the code to our Solidity version.\\ninterface EIP1271Verifier {\\n    /// @dev Should return whether the signature provided is valid for the\\n    /// provided data\\n    /// @param _hash      Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _data\\n    ///\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for\\n    /// solc > 0.5)\\n    /// MUST allow external calls\\n    ///\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x18a47c90b82bb64e479c84b8ffd469621be08d11a608137c23f92739d1a82f18\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Interaction.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Interaction Library\\n/// @author Gnosis Developers\\nlibrary GPv2Interaction {\\n    /// @dev Interaction data for performing arbitrary contract interactions.\\n    /// Submitted to [`GPv2Settlement.settle`] for code execution.\\n    struct Data {\\n        address target;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    /// @dev Execute an arbitrary contract interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    function execute(Data calldata interaction) internal {\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory response) =\\n            (interaction.target).call{value: interaction.value}(\\n                interaction.callData\\n            );\\n        // solhint-enable avoid-low-level-calls\\n\\n        if (!success) {\\n            // Assembly used to revert with correctly encoded error message.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                revert(add(response, 0x20), mload(response))\\n            }\\n        }\\n    }\\n\\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    /// @return result The 4 byte function selector of the call encoded in\\n    /// this interaction.\\n    function selector(Data calldata interaction)\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        bytes calldata callData = interaction.callData;\\n        if (callData.length >= 4) {\\n            // NOTE: Read the first word of the interaction's calldata. The\\n            // value does not need to be shifted since `bytesN` values are left\\n            // aligned, and the value does not need to be masked since masking\\n            // occurs when the value is accessed and not stored:\\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                result := calldataload(callData.offset)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe219144ee2b2aecbac23dda1f8271d7ca389a6a9843886082429d9bab02dccbf\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Order.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Order Library\\n/// @author Gnosis Developers\\nlibrary GPv2Order {\\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\\n    /// all order parameters that are signed for submitting to GP.\\n    struct Data {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        bytes32 kind;\\n        bool partiallyFillable;\\n    }\\n\\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\n    ///     \\\"Order(\\\" +\\n    ///         \\\"address sellToken,\\\" +\\n    ///         \\\"address buyToken,\\\" +\\n    ///         \\\"address receiver,\\\" +\\n    ///         \\\"uint256 sellAmount,\\\" +\\n    ///         \\\"uint256 buyAmount,\\\" +\\n    ///         \\\"uint32 validTo,\\\" +\\n    ///         \\\"bytes32 appData,\\\" +\\n    ///         \\\"uint256 feeAmount,\\\" +\\n    ///         \\\"string kind,\\\" +\\n    ///         \\\"bool partiallyFillable\\\" +\\n    ///     \\\")\\\"\\n    /// )\\n    /// ```\\n    bytes32 internal constant TYPE_HASH =\\n        hex\\\"d604be04a8c6d2df582ec82eba9b65ce714008acbf9122dd95e499569c8f1a80\\\";\\n\\n    /// @dev The marker value for a sell order for computing the order struct\\n    /// hash. This allows the EIP-712 compatible wallets to display a\\n    /// descriptive string for the order kind (instead of 0 or 1).\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"sell\\\")\\n    /// ```\\n    bytes32 internal constant SELL =\\n        hex\\\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\\\";\\n\\n    /// @dev The OrderKind marker value for a buy order for computing the order\\n    /// struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"buy\\\")\\n    /// ```\\n    bytes32 internal constant BUY =\\n        hex\\\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\\\";\\n\\n    /// @dev The byte length of an order unique identifier.\\n    uint256 internal constant UID_LENGTH = 56;\\n\\n    /// @dev Return the EIP-712 signing hash for the specified order.\\n    ///\\n    /// @param order The order to compute the EIP-712 signing hash for.\\n    /// @param domainSeparator The EIP-712 domain separator to use.\\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\\n    function hash(Data memory order, bytes32 domainSeparator)\\n        internal\\n        pure\\n        returns (bytes32 orderDigest)\\n    {\\n        bytes32 structHash;\\n\\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\\n        // in the EIP proposal, noting that the order struct has 10 fields, and\\n        // including the type hash `(10 + 1) * 32 = 352` bytes to hash.\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let dataStart := sub(order, 32)\\n            let temp := mload(dataStart)\\n            mstore(dataStart, TYPE_HASH)\\n            structHash := keccak256(dataStart, 352)\\n            mstore(dataStart, temp)\\n        }\\n\\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\\n        // hash using scratch memory past the free memory pointer. The signing\\n        // hash is computed from `\\\"\\\\x19\\\\x01\\\" || domainSeparator || structHash`.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\\n            mstore(add(freeMemoryPointer, 34), structHash)\\n            orderDigest := keccak256(freeMemoryPointer, 66)\\n        }\\n    }\\n\\n    /// @dev Packs order UID parameters into the specified memory location. The\\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\\n    /// it allows re-using the memory for packing the order UID.\\n    ///\\n    /// This function reverts if the order UID buffer is not the correct size.\\n    ///\\n    /// @param orderUid The buffer pack the order UID parameters into.\\n    /// @param orderDigest The EIP-712 struct digest derived from the order\\n    /// parameters.\\n    /// @param owner The address of the user who owns this order.\\n    /// @param validTo The epoch time at which the order will stop being valid.\\n    function packOrderUidParams(\\n        bytes memory orderUid,\\n        bytes32 orderDigest,\\n        address owner,\\n        uint32 validTo\\n    ) internal pure {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: uid buffer overflow\\\");\\n\\n        // NOTE: Write the order UID to the allocated memory buffer. The order\\n        // parameters are written to memory in **reverse order** as memory\\n        // operations write 32-bytes at a time and we want to use a packed\\n        // encoding. This means, for example, that after writing the value of\\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\\n        // only 20 bytes and `20:32` should be `0`s:\\n        //\\n        //        |           1111111111222222222233333333334444444444555555\\n        //   byte | 01234567890123456789012345678901234567890123456789012345\\n        // -------+---------------------------------------------------------\\n        //  field | [.........orderDigest..........][......owner.......][vT]\\n        // -------+---------------------------------------------------------\\n        // mstore |                         [000000000000000000000000000.vT]\\n        //        |                     [00000000000.......owner.......]\\n        //        | [.........orderDigest..........]\\n        //\\n        // Additionally, since Solidity `bytes memory` are length prefixed,\\n        // 32 needs to be added to all the offsets.\\n        //\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(orderUid, 56), validTo)\\n            mstore(add(orderUid, 52), owner)\\n            mstore(add(orderUid, 32), orderDigest)\\n        }\\n    }\\n\\n    /// @dev Extracts specific order information from the standardized unique\\n    /// order id of the protocol.\\n    ///\\n    /// @param orderUid The unique identifier used to represent an order in\\n    /// the protocol. This uid is the packed concatenation of the order digest,\\n    /// the validTo order parameter and the address of the user who created the\\n    /// order. It is used by the user to interface with the contract directly,\\n    /// and not by calls that are triggered by the solvers.\\n    /// @return orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the user who owns this order.\\n    /// @return validTo The epoch time at which the order will stop being valid.\\n    function extractOrderUidParams(bytes calldata orderUid)\\n        internal\\n        pure\\n        returns (\\n            bytes32 orderDigest,\\n            address owner,\\n            uint32 validTo\\n        )\\n    {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: invalid uid\\\");\\n\\n        // Use assembly to efficiently decode packed calldata.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            orderDigest := calldataload(orderUid.offset)\\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcec87ffd454ab5f8aaee4ea4b175aae04f711f6f3500875132741d0a647ddc4a\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title GPv2SafeERC20\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract that does\\n/// not revert when calling a non-contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /// @dev A reimplementation of the function with the same name in\\n    /// Openzeppelin's SafeERC20. Unlike Openzeppelin's implementation, this\\n    /// function does not revert if an address without code is called.\\n    ///\\n    /// @param token The token targeted by the call.\\n    /// @param data The call data (encoded using abi.encode or one of its\\n    /// variants).\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n\\n        if (!success) {\\n            // Assembly used to revert with correctly encoded error message.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        }\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"GPv2SafeERC20: failed transfer\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe57b9eaae4b7a9619b1aa5b5a8822a09a3e16d21ad1a3498eb384cf76a5a9894\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Trade.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../mixins/GPv2Signing.sol\\\";\\nimport \\\"./GPv2Order.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Trade Library.\\n/// @author Gnosis Developers\\nlibrary GPv2Trade {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev A struct representing a trade to be executed as part a batch\\n    /// settlement.\\n    struct Data {\\n        uint256 sellTokenIndex;\\n        uint256 buyTokenIndex;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        uint256 flags;\\n        uint256 executedAmount;\\n        uint256 feeDiscount;\\n        bytes signature;\\n    }\\n\\n    /// @dev Extracts the order data and signing scheme for the specified trade.\\n    ///\\n    /// @param trade The trade.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param order The memory location to extract the order data to.\\n    function extractOrder(\\n        Data calldata trade,\\n        IERC20[] calldata tokens,\\n        GPv2Order.Data memory order\\n    ) internal pure returns (GPv2Signing.Scheme signingScheme) {\\n        order.sellToken = tokens[trade.sellTokenIndex];\\n        order.buyToken = tokens[trade.buyTokenIndex];\\n        order.receiver = trade.receiver;\\n        order.sellAmount = trade.sellAmount;\\n        order.buyAmount = trade.buyAmount;\\n        order.validTo = trade.validTo;\\n        order.appData = trade.appData;\\n        order.feeAmount = trade.feeAmount;\\n        (order.kind, order.partiallyFillable, signingScheme) = extractFlags(\\n            trade.flags\\n        );\\n    }\\n\\n    /// @dev Decodes trade flags.\\n    ///\\n    /// Trade flags are used to tightly encode information on how to decode\\n    /// an order. Examples that directly affect the structure of an order are\\n    /// the kind of order (either a sell or a buy order) as well as whether the\\n    /// order is partially fillable or if it is a \\\"fill-or-kill\\\" order. It also\\n    /// encodes the signature scheme used to validate the order. As the most\\n    /// likely values are fill-or-kill sell orders by an externally owned\\n    /// account, the flags are chosen such that `0x00` represents this kind of\\n    /// order. The flags byte uses the following format:\\n    ///\\n    /// ```\\n    /// bit | 31 ... 4 | 3 | 2 | 1 | 0 |\\n    /// ----+----------+-------+---+---+\\n    ///     | reserved | *   * | * | * |\\n    ///                  |   |   |   |\\n    ///                  |   |   |   +---- order kind bit, 0 for a sell order\\n    ///                  |   |   |         and 1 for a buy order\\n    ///                  |   |   |\\n    ///                  |   |   +-------- order fill bit, 0 for fill-or-kill\\n    ///                  |   |             and 1 for a partially fillable order\\n    ///                  |   |\\n    ///                  +---+------------ signature scheme bits:\\n    ///                                    00: EIP-712\\n    ///                                    01: eth_sign\\n    ///                                    10: EIP-1271\\n    ///                                    11: pre_sign\\n    /// ```\\n    function extractFlags(uint256 flags)\\n        internal\\n        pure\\n        returns (\\n            bytes32 kind,\\n            bool partiallyFillable,\\n            GPv2Signing.Scheme signingScheme\\n        )\\n    {\\n        if (flags & 0x01 == 0) {\\n            kind = GPv2Order.SELL;\\n        } else {\\n            kind = GPv2Order.BUY;\\n        }\\n        partiallyFillable = flags & 0x02 != 0;\\n\\n        // NOTE: Take advantage of the fact that Solidity will revert if the\\n        // following expression does not produce a valid enum value. This means\\n        // we check here that the leading reserved bits must be 0.\\n        signingScheme = GPv2Signing.Scheme(flags >> 2);\\n    }\\n}\\n\",\"keccak256\":\"0x13d94be3343d5bb083faeb99b583a6d8f496b6f4d9f3f19650ea8867904f8439\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2TradeExecution.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./GPv2SafeERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Trade Execution\\n/// @author Gnosis Developers\\nlibrary GPv2TradeExecution {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /// @dev Executed trade data.\\n    struct Data {\\n        address owner;\\n        address receiver;\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n    }\\n\\n    /// @dev Ether marker address used to indicate an order is buying Ether.\\n    address internal constant BUY_ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Marker address used to indicate that the receiver of the trade\\n    /// proceeds should the owner of the order.\\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\\n\\n    /// @dev Executes the trade's sell amount, transferring it from the trade's\\n    /// owner to the specified recipient.\\n    function transferSellAmountToRecipient(\\n        Data calldata trade,\\n        address recipient\\n    ) internal {\\n        require(\\n            address(trade.sellToken) != BUY_ETH_ADDRESS,\\n            \\\"GPv2: cannot transfer native ETH\\\"\\n        );\\n        trade.sellToken.safeTransferFrom(\\n            trade.owner,\\n            recipient,\\n            trade.sellAmount\\n        );\\n    }\\n\\n    /// @dev Executes the trade's buy amount, transferring it to the trade's\\n    /// receiver from the caller's address.\\n    function transferBuyAmountToOwner(Data memory trade) internal {\\n        address receiver = trade.receiver;\\n        if (receiver == RECEIVER_SAME_AS_OWNER) {\\n            receiver = trade.owner;\\n        }\\n\\n        if (address(trade.buyToken) == BUY_ETH_ADDRESS) {\\n            payable(receiver).transfer(trade.buyAmount);\\n        } else {\\n            trade.buyToken.safeTransfer(receiver, trade.buyAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa114673f7121f8354637f6eee366184228cc94470dd2ea6f174ed592407ca9f4\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/mixins/GPv2Signing.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/GPv2EIP1271.sol\\\";\\nimport \\\"../libraries/GPv2Order.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Signing Library.\\n/// @author Gnosis Developers\\nabstract contract GPv2Signing {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev Recovered trade data containing the extracted order and the\\n    /// recovered owner address.\\n    struct RecoveredOrder {\\n        GPv2Order.Data data;\\n        bytes uid;\\n        address owner;\\n    }\\n\\n    /// @dev Signing scheme used for recovery.\\n    enum Scheme {Eip712, EthSign, Eip1271, PreSign}\\n\\n    /// @dev The EIP-712 domain type hash used for computing the domain\\n    /// separator.\\n    bytes32 private constant DOMAIN_TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev The EIP-712 domain name used for computing the domain separator.\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"Gnosis Protocol\\\");\\n\\n    /// @dev The EIP-712 domain version used for computing the domain separator.\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"v2\\\");\\n\\n    /// @dev Marker value indicating an order is pre-signed.\\n    uint256 private constant PRE_SIGNED =\\n        uint256(keccak256(\\\"GPv2Signing.Scheme.PreSign\\\"));\\n\\n    /// @dev The domain separator used for signing orders that gets mixed in\\n    /// making signatures for different domains incompatible. This domain\\n    /// separator is computed following the EIP-712 standard and has replay\\n    /// protection mixed in so that signed orders are only valid for specific\\n    /// GPv2 contracts.\\n    bytes32 public immutable domainSeparator;\\n\\n    /// @dev Storage indicating whether or not an order has been signed by a\\n    /// particular address.\\n    mapping(bytes => uint256) public preSignature;\\n\\n    constructor() {\\n        // NOTE: Currently, the only way to get the chain ID in solidity is\\n        // using assembly.\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Sets a presignature for the specified order UID.\\n    ///\\n    /// @param orderUid The unique identifier of the order to pre-sign.\\n    function setPreSignature(bytes calldata orderUid, bool signed) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: cannot presign order\\\");\\n        if (signed) {\\n            preSignature[orderUid] = PRE_SIGNED;\\n        } else {\\n            preSignature[orderUid] = 0;\\n        }\\n    }\\n\\n    /// @dev Returns an empty recovered order with a pre-allocated buffer for\\n    /// packing the unique identifier.\\n    ///\\n    /// @return recoveredOrder The empty recovered order data.\\n    function allocateRecoveredOrder()\\n        internal\\n        pure\\n        returns (RecoveredOrder memory recoveredOrder)\\n    {\\n        recoveredOrder.uid = new bytes(GPv2Order.UID_LENGTH);\\n    }\\n\\n    /// @dev Extracts order data and recovers the signer from the specified\\n    /// trade.\\n    ///\\n    /// @param recoveredOrder Memory location used for writing the recovered order data.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param trade The trade data to recover the order data from.\\n    function recoverOrderFromTrade(\\n        RecoveredOrder memory recoveredOrder,\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) internal view {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n\\n        Scheme signingScheme = GPv2Trade.extractOrder(trade, tokens, order);\\n        (bytes32 orderDigest, address owner) =\\n            recoverOrderSigner(order, signingScheme, trade.signature);\\n\\n        recoveredOrder.uid.packOrderUidParams(\\n            orderDigest,\\n            owner,\\n            order.validTo\\n        );\\n        recoveredOrder.owner = owner;\\n    }\\n\\n    /// @dev The length of any signature from an externally owned account.\\n    uint256 private constant ECDSA_SIGNATURE_LENGTH = 65;\\n\\n    /// @dev Recovers an order's signer from the specified order and signature.\\n    ///\\n    /// @param order The order to recover a signature for.\\n    /// @param signingScheme The signing scheme.\\n    /// @param signature The signature bytes.\\n    /// @return orderDigest The computed order hash.\\n    /// @return owner The recovered address from the specified signature.\\n    function recoverOrderSigner(\\n        GPv2Order.Data memory order,\\n        Scheme signingScheme,\\n        bytes calldata signature\\n    ) internal view returns (bytes32 orderDigest, address owner) {\\n        orderDigest = order.hash(domainSeparator);\\n        if (signingScheme == Scheme.Eip712) {\\n            owner = recoverEip712Signer(orderDigest, signature);\\n        } else if (signingScheme == Scheme.EthSign) {\\n            owner = recoverEthsignSigner(orderDigest, signature);\\n        } else if (signingScheme == Scheme.Eip1271) {\\n            owner = recoverEip1271Signer(orderDigest, signature);\\n        } else if (signingScheme == Scheme.PreSign) {\\n            owner = recoverPreSigner(orderDigest, signature, order.validTo);\\n        }\\n    }\\n\\n    /// @dev Perform an ECDSA recover for the specified message and calldata\\n    /// signature.\\n    ///\\n    /// The signature is encoded by tighyly packing the following struct:\\n    /// ```\\n    /// struct EncodedSignature {\\n    ///     bytes32 r;\\n    ///     bytes32 s;\\n    ///     uint8 v;\\n    /// }\\n    /// ```\\n    ///\\n    /// @param message The signed message.\\n    /// @param encodedSignature The encoded signature.\\n    function ecdsaRecover(bytes32 message, bytes calldata encodedSignature)\\n        internal\\n        pure\\n        returns (address signer)\\n    {\\n        require(\\n            encodedSignature.length == ECDSA_SIGNATURE_LENGTH,\\n            \\\"GPv2: malformed ecdsa signature\\\"\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // NOTE: Use assembly to efficiently decode signature data.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // r = uint256(encodedSignature[0:32])\\n            r := calldataload(encodedSignature.offset)\\n            // s = uint256(encodedSignature[32:64])\\n            s := calldataload(add(encodedSignature.offset, 32))\\n            // v = uint8(encodedSignature[64])\\n            v := shr(248, calldataload(add(encodedSignature.offset, 64)))\\n        }\\n\\n        signer = ecrecover(message, v, r, s);\\n        require(signer != address(0), \\\"GPv2: invalid ecdsa signature\\\");\\n    }\\n\\n    /// @dev Decodes signature bytes originating from an EIP-712-encoded\\n    /// signature.\\n    ///\\n    /// EIP-712 signs typed data. The specifications are described in the\\n    /// related EIP (<https://eips.ethereum.org/EIPS/eip-712>).\\n    ///\\n    /// EIP-712 signatures are encoded as standard ECDSA signatures as described\\n    /// in the corresponding decoding function [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEip712Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        owner = ecdsaRecover(orderDigest, encodedSignature);\\n    }\\n\\n    /// @dev Decodes signature bytes originating from the output of the eth_sign\\n    /// RPC call.\\n    ///\\n    /// The specifications are described in the Ethereum documentation\\n    /// (<https://eth.wiki/json-rpc/API#eth_sign>).\\n    ///\\n    /// eth_sign signatures are encoded as standard ECDSA signatures as\\n    /// described in the corresponding decoding function\\n    /// [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEthsignSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        // The signed message is encoded as:\\n        // `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" || length || data`, where\\n        // the length is a constant (32 bytes) and the data is defined as:\\n        // `orderDigest`.\\n        bytes32 ethsignDigest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    orderDigest\\n                )\\n            );\\n\\n        owner = ecdsaRecover(ethsignDigest, encodedSignature);\\n    }\\n\\n    /// @dev Verifies the input calldata as an EIP-1271 contract signature and\\n    /// returns the address of the signer.\\n    ///\\n    /// The encoded signature tightly packs the following struct:\\n    ///\\n    /// ```\\n    /// struct EncodedEip1271Signature {\\n    ///     address owner;\\n    ///     bytes signature;\\n    /// }\\n    /// ```\\n    ///\\n    /// This function enforces that the encoded data stores enough bytes to\\n    /// cover the full length of the decoded signature.\\n    ///\\n    /// @param encodedSignature The encoded EIP-1271 signature.\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the signer.\\n    function recoverEip1271Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal view returns (address owner) {\\n        // NOTE: Use assembly to read the verifier address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        // NOTE: Configure prettier to ignore the following line as it causes\\n        // a panic in the Solidity plugin.\\n        // prettier-ignore\\n        bytes calldata signature = encodedSignature[20:];\\n\\n        require(\\n            EIP1271Verifier(owner).isValidSignature(orderDigest, signature) ==\\n                GPv2EIP1271.MAGICVALUE,\\n            \\\"GPv2: invalid eip1271 signature\\\"\\n        );\\n    }\\n\\n    /// @dev Verifies the order has been pre-signed. The signature is the\\n    /// address of the signer of the order.\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature The pre-sign signature reprenting the order UID.\\n    /// @param validTo The order expiry timestamp.\\n    /// @return owner The address of the signer.\\n    function recoverPreSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature,\\n        uint32 validTo\\n    ) internal view returns (address owner) {\\n        require(encodedSignature.length == 20, \\\"GPv2: malformed presignature\\\");\\n        // NOTE: Use assembly to read the owner address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        bytes memory orderUid = new bytes(GPv2Order.UID_LENGTH);\\n        orderUid.packOrderUidParams(orderDigest, owner, validTo);\\n\\n        require(\\n            preSignature[orderUid] == PRE_SIGNED,\\n            \\\"GPv2: order not presigned\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6e6545b64f7c417cf0c3ef32cb04afdd262ea7f396ee587603372cb714ba5a1e\",\"license\":\"LGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200332638038062003326833981016040819052620000349162000146565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f6c85c0337eba1661327f94f3bf46c8a7f9311a563f4d5c948362567f5d8ed60c828401527ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf606080840191909152466080808501919091523060a08086019190915285518086038201815260c09095019586905284519490930193909320909252600180559083901b6001600160601b0319169052620001039062000138565b604051809103906000f08015801562000120573d6000803e3d6000fd5b5060601b6001600160601b03191660c0525062000176565b6104d18062002e5583390190565b60006020828403121562000158578081fd5b81516001600160a01b03811681146200016f578182fd5b9392505050565b60805160a05160601c60c05160601c612c98620001bd6000398061062352806108205280610d825250806103c452806106f9525080610a2d52806117265250612c986000f3fe6080604052600436106100e15760003560e01c806365906ca31161007f578063d08d33d111610059578063d08d33d11461024b578063ec6cb13f1461026b578063f698da251461028b578063f84436bd146102a0576100e8565b806365906ca3146101f6578063c4b1e4fb14610216578063cd65ea871461022b576100e8565b80633a1b407a116100bb5780633a1b407a1461016757806343218e191461018957806352b8dfc5146101b65780635624b25b146101d6576100e8565b806315337bc0146100ed5780632335c76b1461010f5780632479fb6e1461013a576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b5061010d61010836600461254e565b6102c0565b005b34801561011b57600080fd5b506101246103c2565b60405161013191906126f0565b60405180910390f35b34801561014657600080fd5b5061015a6101553660046125e3565b6103e6565b60405161013191906127a8565b34801561017357600080fd5b5061017c610403565b60405161013191906127b1565b34801561019557600080fd5b506101a96101a436600461240a565b610427565b604051610131919061282b565b3480156101c257600080fd5b5061010d6101d1366004612616565b61059f565b3480156101e257600080fd5b506101a96101f1366004612659565b6105a3565b34801561020257600080fd5b5061010d6102113660046125e3565b610619565b34801561022257600080fd5b50610124610621565b34801561023757600080fd5b5061010d610246366004612456565b610645565b34801561025757600080fd5b5061015a6102663660046125e3565b6108ee565b34801561027757600080fd5b5061010d61028636600461258e565b61090b565b34801561029757600080fd5b5061015a610a2b565b3480156102ac57600080fd5b506101a96102bb36600461240a565b610a4f565b60006102cc8383610cb1565b5091505073ffffffffffffffffffffffffffffffffffffffff81163314610328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90612895565b60405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6002848460405161035b9291906126c4565b9081526020016040518091039020819055508073ffffffffffffffffffffffffffffffffffffffff167f875b6cb035bbd4ac6500fabc6d1e4ca5bdc58a3e2b424ccb5c24cdbebeb009a984846040516103b59291906127de565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b805160208183018101805160028252928201919093012091525481565b7f43218e198a5f5c70ca65adf1973b6285a79c4d29a39cc2a8bb67b912f447dc6481565b606060008373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061049057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610453565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146104f0576040519150601f19603f3d011682016040523d82523d6000602084013e6104f5565b606091505b50809350819250505061059882826040516020018083805190602001908083835b6020831061055357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610516565b6001836020036101000a03801982511681845116808217855250505050505090500182151560f81b815260010192505050604051602081830303815290604052610619565b5092915050565b9052565b606060008260200267ffffffffffffffff811180156105c157600080fd5b506040519080825280601f01601f1916602001820160405280156105ec576020820181803683370190505b50905060005b8381101561060f57848101546020808302840101526001016105f2565b5090505b92915050565b805160208201fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600260015414156106b757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556040517f02cc250d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906302cc250d9061072e9033906004016126f0565b60206040518083038186803b15801561074657600080fd5b505afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190612532565b6107b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906129df565b6107d08260005b6020028101906107cb9190612ae2565b610d3f565b60006107e0898989898989610e76565b6040517faef733d700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063aef733d790610855908490600401612711565b600060405180830381600087803b15801561086f57600080fd5b505af1158015610883573d6000803e3d6000fd5b50505050610897836001600381106107bb57fe5b6108a081610f79565b6108ab8360026107bb565b6108b482610fad565b60405133907f40338ce1a7c49204f0099533b1e9a7ee0a3d261f84974ab7af36105b8c4e9db490600090a250506001805550505050505050565b805160208183018101805160008252928201919093012091525481565b60006109178484610cb1565b5091505073ffffffffffffffffffffffffffffffffffffffff8116331461099f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f475076323a2063616e6e6f74207072657369676e206f72646572000000000000604482015290519081900360640190fd5b81156109f9577ff59c009283ff87aa78203fc4d9c2df025ee851130fb69cc3e068941f6b5e2d6f60001c60008585604051808383808284378083019250505092505050908152602001604051809103902081905550610a25565b600080858560405180838380828437919091019485525050604051928390036020019092209290925550505b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060007f43218e198a5f5c70ca65adf1973b6285a79c4d29a39cc2a8bb67b912f447dc648484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ad2578181015183820152602001610aba565b50505050905090810190601f168015610aff5780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909816979097178752518151919750309688965090945084935091508083835b60208310610bd057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610b93565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c32576040519150601f19603f3d011682016040523d82523d6000602084013e610c37565b606091505b50905080925050600082600184510381518110610c5057fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b149050610c9383600185510361059f565b8015610ca0575050610613565b610ca983610619565b505092915050565b6000808060388414610d2457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f475076323a20696e76616c696420756964000000000000000000000000000000604482015290519081900360640190fd5b5050823593602084013560601c936034013560e01c92509050565b3660005b82811015610a2557838382818110610d5757fe5b9050602002810190610d699190612b79565b915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610daf60208401846123f0565b73ffffffffffffffffffffffffffffffffffffffff161415610dfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90612a16565b610e0682610fdb565b610e1360208301836123f0565b73ffffffffffffffffffffffffffffffffffffffff167fed99827efb37016f2275f98c4bcf71c7551c75d59e9b450f79fa32e60be672c28360200135610e5885611075565b604051610e66929190612a4d565b60405180910390a2600101610d43565b60606000610e8261109f565b90508267ffffffffffffffff81118015610e9b57600080fd5b50604051908082528060200260200182016040528015610ed557816020015b610ec26121d3565b815260200190600190039081610eba5790505b50915060005b83811015610f6d5736858583818110610ef057fe5b9050602002810190610f029190612bac565b9050610f10838b8b846110cc565b610f648389898435818110610f2157fe5b905060200201358a8a8560200135818110610f3857fe5b90506020020135846101200135856101400135898881518110610f5757fe5b6020026020010151611143565b50600101610edb565b50509695505050505050565b60005b8151811015610fa957610fa1828281518110610f9457fe5b60200260200101516114be565b600101610f7c565b5050565b610fc1610fba8280612a7d565b6002611597565b610fd8610fd16020830183612a7d565b6000611597565b50565b60008073ffffffffffffffffffffffffffffffffffffffff83351660208401356110086040860186612b16565b604051808383808284376040519201945060009350909150508083038185875af1925050503d8060008114611059576040519150601f19603f3d011682016040523d82523d6000602084013e61105e565b606091505b50915091508161107057805160208201fd5b505050565b600036816110866040850185612b16565b90925090506004811061109857813592505b5050919050565b6110a7612208565b6040805160388082526060820190925290602082018180368337505050602082015290565b835160006110dc83868685611647565b90506000806110f984846110f4610160890189612b16565b61171d565b9150915061111c82828660a001518b602001516117e0909392919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16604090970196909652505050505050565b8551602087015160a08201514263ffffffff9091161015611190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906128cc565b60408089015173ffffffffffffffffffffffffffffffffffffffff908116855283820151811660208087019190915284518216928601929092529083015116606084015260808201516111e39087611862565b60608301516111f29089611862565b101561122a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f9061293a565b6000806000807ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee3467758661010001511415611321578561012001511561128e57606086015160e08701518a955061127f9086611862565b8161128657fe5b04915061129d565b856060015193508560e0015191505b896112a8858d611862565b816112af57fe5b0492506112dc846002876040516112c691906126d4565b90815260405190819003602001902054906118dc565b9050856060015181111561131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90612971565b6113ca565b8561012001511561135257608086015160e08701518a94506113439085611862565b8161134a57fe5b049150611361565b856080015192508560e0015191505b8a61136c848c611862565b8161137357fe5b04935061138a836002876040516112c691906126d4565b905085608001518111156113ca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90612971565b81881115611404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f90612903565b908790039061141384836118dc565b608088015260a0870183905260405181906002906114329088906126d4565b908152602001604051809103902081905550866000015173ffffffffffffffffffffffffffffffffffffffff167fa07a543ab8a018198e99ca0184c93fe9050a79400a0a723441f84de1d972cc17886040015189606001518a608001518b60a00151878b6040516114a89695949392919061283e565b60405180910390a2505050505050505050505050565b602081015173ffffffffffffffffffffffffffffffffffffffff81166114e2575080515b606082015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14156115645760a082015160405173ffffffffffffffffffffffffffffffffffffffff83169180156108fc02916000818181858888f1935050505015801561155e573d6000803e3d6000fd5b50610fa9565b610fa9818360a00151846060015173ffffffffffffffffffffffffffffffffffffffff166119509092919063ffffffff16565b60005b82811015610a25573660008585848181106115b157fe5b90506020028101906115c39190612b16565b9150915060006115d38383610cb1565b92505050428163ffffffff1610611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031f906129a8565b60008584846040516116299291906126c4565b9081526040519081900360200190205550506001909101905061159a565b60008383863581811061165657fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff168452508490849087013581811061168957fe5b73ffffffffffffffffffffffffffffffffffffffff602091820293909301358316908501525060408087013590911690830152606080860135908301526080808601359083015263ffffffff60a080870135919091169083015260c0808601359083015260e080860135908301526117056101008601356119dd565b90151561012085015261010090930152509392505050565b60008061174a867f0000000000000000000000000000000000000000000000000000000000000000611a54565b9150600085600381111561175a57fe5b14156117725761176b828585611ade565b90506117d7565b600185600381111561178057fe5b14156117915761176b828585611af3565b600285600381111561179f57fe5b14156117b05761176b828585611b5b565b60038560038111156117be57fe5b14156117d7576117d48285858960a00151611cf9565b90505b94509492505050565b603884511461185057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a2075696420627566666572206f766572666c6f7700000000000000604482015290519081900360640190fd5b60388401526034830152602090910152565b60008261187157506000610613565b8282028284828161187e57fe5b04146118d5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612c426021913960400191505060405180910390fd5b9392505050565b6000828201838110156118d557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611070908490611ebe565b6000808060018416611a11577ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee3467759250611a35565b7f6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc92505b60028085161515925084901c6003811115611a4c57fe5b929491935050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910180517fd604be04a8c6d2df582ec82eba9b65ce714008acbf9122dd95e499569c8f1a808252610160822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000611aeb848484612028565b949350505050565b6000808460405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050611b52818585612028565b95945050505050565b813560601c366000611b708460148188612bdf565b604080517f1626ba7e00000000000000000000000000000000000000000000000000000000808252600482018b81526024830193845260448301859052949650929450919273ffffffffffffffffffffffffffffffffffffffff871692631626ba7e928b928892889290606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015611c3657600080fd5b505afa158015611c4a573d6000803e3d6000fd5b505050506040513d6020811015611c6057600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614611cf057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f475076323a20696e76616c69642065697031323731207369676e617475726500604482015290519081900360640190fd5b50509392505050565b600060148314611d6a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f475076323a206d616c666f726d6564207072657369676e617475726500000000604482015290519081900360640190fd5b506040805160388082526060828101909352853590921c9160009190602082018180368337019050509050611da1818784866117e0565b7ff59c009283ff87aa78203fc4d9c2df025ee851130fb69cc3e068941f6b5e2d6f60001c6000826040518082805190602001908083835b60208310611e1557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611dd8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205414611eb557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206f72646572206e6f74207072657369676e656400000000000000604482015290519081900360640190fd5b50949350505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b60208310611f2657805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101611ee9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611f88576040519150601f19603f3d011682016040523d82523d6000602084013e611f8d565b606091505b509150915081611f9f57805160208201fd5b805115610a2557808060200190516020811015611fbb57600080fd5b5051610a2557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f475076325361666545524332303a206661696c6564207472616e736665720000604482015290519081900360640190fd5b60006041821461209957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f475076323a206d616c666f726d6564206563647361207369676e617475726500604482015290519081900360640190fd5b604080516000815260208181018084528790528286013560f81c82840181905286356060840181905282880135608085018190529451909493919260019260a0808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa15801561211c573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff84166121c957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f475076323a20696e76616c6964206563647361207369676e6174757265000000604482015290519081900360640190fd5b5050509392505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b604051806060016040528061221b61222f565b815260606020820152600060409091015290565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081019190915290565b803573ffffffffffffffffffffffffffffffffffffffff811681146122a757600080fd5b919050565b806060810183101561061357600080fd5b60008083601f8401126122ce578182fd5b50813567ffffffffffffffff8111156122e5578182fd5b60208301915083602080830285010111156122ff57600080fd5b9250929050565b60008083601f840112612317578182fd5b50813567ffffffffffffffff81111561232e578182fd5b6020830191508360208285010111156122ff57600080fd5b600082601f830112612356578081fd5b813567ffffffffffffffff8082111561236b57fe5b60405160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011682010181811083821117156123a757fe5b6040528281528483016020018610156123be578384fd5b82602086016020830137918201602001929092529392505050565b6000604082840312156123ea578081fd5b50919050565b600060208284031215612401578081fd5b6118d582612283565b6000806040838503121561241c578081fd5b61242583612283565b9150602083013567ffffffffffffffff811115612440578182fd5b61244c85828601612346565b9150509250929050565b60008060008060008060008060a0898b031215612471578384fd5b883567ffffffffffffffff80821115612488578586fd5b6124948c838d016122bd565b909a50985060208b01359150808211156124ac578586fd5b6124b88c838d016122bd565b909850965060408b01359150808211156124d0578586fd5b6124dc8c838d016122bd565b909650945060608b01359150808211156124f4578384fd5b6125008c838d016122ac565b935060808b0135915080821115612515578283fd5b506125228b828c016123d9565b9150509295985092959890939650565b600060208284031215612543578081fd5b81516118d581612c33565b60008060208385031215612560578182fd5b823567ffffffffffffffff811115612576578283fd5b61258285828601612306565b90969095509350505050565b6000806000604084860312156125a2578283fd5b833567ffffffffffffffff8111156125b8578384fd5b6125c486828701612306565b90945092505060208401356125d881612c33565b809150509250925092565b6000602082840312156125f4578081fd5b813567ffffffffffffffff81111561260a578182fd5b611aeb84828501612346565b60008060408385031215612628578182fd5b823567ffffffffffffffff81111561263e578283fd5b61264a85828601612346565b95602094909401359450505050565b6000806040838503121561266b578182fd5b50508035926020909101359150565b60008151808452612692816020860160208601612c07565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000828483379101908152919050565b600082516126e6818460208701612c07565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602080825282518282018190526000919060409081850190868401855b8281101561279b578151805173ffffffffffffffffffffffffffffffffffffffff90811686528782015181168887015286820151811687870152606080830151909116908601526080808201519086015260a0908101519085015260c0909301929085019060010161272e565b5091979650505050505050565b90815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000602082526118d5602083018461267a565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015283608083015260c060a083015261288960c083018461267a565b98975050505050505050565b6020808252601f908201527f475076323a2063616c6c657220646f6573206e6f74206f776e206f7264657200604082015260600190565b60208082526013908201527f475076323a206f72646572206578706972656400000000000000000000000000604082015260600190565b6020808252601c908201527f475076323a2066656520646973636f756e7420746f6f206c6172676500000000604082015260600190565b6020808252601f908201527f475076323a206c696d6974207072696365206e6f742072657370656374656400604082015260600190565b60208082526012908201527f475076323a206f726465722066696c6c65640000000000000000000000000000604082015260600190565b60208082526017908201527f475076323a206f72646572207374696c6c2076616c6964000000000000000000604082015260600190565b60208082526012908201527f475076323a206e6f74206120736f6c7665720000000000000000000000000000604082015260600190565b6020808252601b908201527f475076323a20666f7262696464656e20696e746572616374696f6e0000000000604082015260600190565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612ab1578283fd5b83018035915067ffffffffffffffff821115612acb578283fd5b60209081019250810236038213156122ff57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612ab1578182fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612b4a578182fd5b83018035915067ffffffffffffffff821115612b64578283fd5b6020019150368190038213156122ff57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126126e6578182fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe818336030181126126e6578182fd5b60008085851115612bee578182fd5b83861115612bfa578182fd5b5050820193919092039150565b60005b83811015612c22578181015183820152602001612c0a565b83811115610a255750506000910152565b8015158114610fd857600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220db43af99285a0b7563c130c810c4217c85104bb0276a17e702b249ef2d573c9964736f6c6343000706003360a060405234801561001057600080fd5b5033606081901b6080526104a161003060003980605d52506104a16000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aef733d714610030575b600080fd5b61004361003e3660046103c4565b610045565b005b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b490610434565b60405180910390fd5b60005b818110156100eb576100e38383838181106100d757fe5b905060c00201336100f0565b6001016100c0565b505050565b604082013573ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee141561018d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f475076323a2063616e6e6f74207472616e73666572206e617469766520455448604482015290519081900360640190fd5b6101bb73ffffffffffffffffffffffffffffffffffffffff60408401358116908435168360808601356101bf565b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261025490859061025a565b50505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b602083106102c257805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610285565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610324576040519150601f19603f3d011682016040523d82523d6000602084013e610329565b606091505b50915091508161033b57805160208201fd5b8051156102545780806020019051602081101561035757600080fd5b505161025457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f475076325361666545524332303a206661696c6564207472616e736665720000604482015290519081900360640190fd5b600080602083850312156103d6578182fd5b823567ffffffffffffffff808211156103ed578384fd5b818501915085601f830112610400578384fd5b81358181111561040e578485fd5b86602060c083028501011115610422578485fd5b60209290920196919550909350505050565b6020808252601d908201527f475076323a206e6f7420616c6c6f77616e636520726563697069656e7400000060408201526060019056fea2646970667358221220eee1be19ad2302da7efd3b05e159627daf68c1f6e28cb3b0142b0c8062b9f46a64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Gnosis Developers",
    "events": {
      "Interaction(address,uint256,bytes4)": {
        "details": "Event emitted for each executed interaction. For gas effeciency, only the interaction calldata selector (first 4 bytes) is included in the event. For interactions without calldata or whose calldata is shorter than 4 bytes, the selector will be `0`."
      },
      "OrderInvalidated(address,bytes)": {
        "details": "Event emitted when an order is invalidated."
      },
      "Settlement(address)": {
        "details": "Event emitted when a settlement complets"
      },
      "Trade(address,address,address,uint256,uint256,uint256,bytes)": {
        "details": "Event emitted for each executed trade."
      }
    },
    "kind": "dev",
    "methods": {
      "getStorageAt(uint256,uint256)": {
        "details": "Reads `length` bytes of storage in the currents contract",
        "params": {
          "length": "- the number of words (32 bytes) of data to read",
          "offset": "- the offset in the current contract's storage in words to start reading from"
        },
        "returns": {
          "_0": "the bytes that were read."
        }
      },
      "invalidateOrder(bytes)": {
        "details": "Invalidate onchain an order that has been signed offline.",
        "params": {
          "orderUid": "The unique identifier of the order that is to be made invalid after calling this function. The user that created the order must be the the sender of this message. See [`extractOrderUidParams`] for details on orderUid."
        }
      },
      "setPreSignature(bytes,bool)": {
        "details": "Sets a presignature for the specified order UID.",
        "params": {
          "orderUid": "The unique identifier of the order to pre-sign."
        }
      },
      "settle(address[],uint256[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,uint256,bytes)[],(address,uint256,bytes)[][3],(bytes[],bytes[]))": {
        "details": "Settle the specified orders at a clearing price. Note that it is the responsibility of the caller to ensure that all GPv2 invariants are upheld for the input settlement, otherwise this call will revert. Namely: - All orders are valid and signed - Accounts have sufficient balance and approval. - Settlement contract has sufficient balance to execute trades. Note   this implies that the accumulated fees held in the contract can also   be used for settlement. This is OK since:   - Solvers need to be authorized   - Misbehaving solvers will be slashed for abusing accumulated fees for     settlement   - Critically, user orders are entirely protected",
        "params": {
          "clearingPrices": "An array of clearing prices where the `i`-th price is for the `i`-th token in the [`tokens`] array.",
          "interactions": "Smart contract interactions split into three separate lists to be run before the settlement, during the settlement and after the settlement respectively.",
          "orderRefunds": "Order refunds for clearing storage related to expired orders.",
          "tokens": "An array of ERC20 tokens to be traded in the settlement. Trades encode tokens as indices into this array.",
          "trades": "Trades for signed orders."
        }
      },
      "simulateDelegatecall(address,bytes)": {
        "details": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.",
        "params": {
          "calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "targetContract": "Address of the contract containing the code to execute."
        }
      },
      "simulateDelegatecallInternal(address,bytes)": {
        "details": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message concatenated with the success flag of the inner call as a last byte.",
        "params": {
          "calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "targetContract": "Address of the contract containing the code to execute."
        }
      }
    },
    "stateVariables": {
      "allowanceManager": {
        "details": "The allowance manager which has access to order funds. This contract is created during deployment"
      },
      "authenticator": {
        "details": "The authenticator is used to determine who can call the settle function. That is, only authorised solvers have the ability to invoke settlements. Any valid authenticator implements an isSolver method called by the onlySolver modifier below."
      },
      "filledAmount": {
        "details": "Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed."
      }
    },
    "title": "Gnosis Protocol v2 Settlement Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4362,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "preSignature",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 2762,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3025,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "filledAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}