{
  "address": "0x9008D19f58AAbD9eD0D60971565AA8510560ab41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract GPv2Authentication",
          "name": "authenticator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "Interaction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "OrderInvalidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "signed",
          "type": "bool"
        }
      ],
      "name": "PreSignature",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "solver",
          "type": "address"
        }
      ],
      "name": "Settlement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authenticator",
      "outputs": [
        {
          "internalType": "contract GPv2Authentication",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "filledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "orderUids",
          "type": "bytes[]"
        }
      ],
      "name": "freeFilledAmountStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "orderUids",
          "type": "bytes[]"
        }
      ],
      "name": "freePreSignatureStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "getStorageAt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "invalidateOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "preSignature",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "signed",
          "type": "bool"
        }
      ],
      "name": "setPreSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "clearingPrices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sellTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executedAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct GPv2Trade.Data[]",
          "name": "trades",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GPv2Interaction.Data[][3]",
          "name": "interactions",
          "type": "tuple[][3]"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "calldataPayload",
          "type": "bytes"
        }
      ],
      "name": "simulateDelegatecall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetContract",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "calldataPayload",
          "type": "bytes"
        }
      ],
      "name": "simulateDelegatecallInternal",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "assetInIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetOutIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.BatchSwapStep[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "sellTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "validTo",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "appData",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "feeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "executedAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct GPv2Trade.Data",
          "name": "trade",
          "type": "tuple"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRelayer",
      "outputs": [
        {
          "internalType": "contract GPv2VaultRelayer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x609fa2e8f32c73c1f5dc21ff60a26238dacb50d4674d336c90d6950bdda17a21",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7EAbac82dA8ea6Ac980d619Cb562a9924d1E3bAa",
    "contractAddress": null,
    "transactionIndex": 16,
    "gasUsed": "4586446",
    "logsBloom": "0x
    "blockHash": "0xfc5a81b279f70ebc4714aebc5620205b327de71719f52bf2e7375dd5de228ef5",
    "transactionHash": "0x609fa2e8f32c73c1f5dc21ff60a26238dacb50d4674d336c90d6950bdda17a21",
    "logs": [],
    "blockNumber": 8727415,
    "cumulativeGasUsed": "8998781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2c4c28DDBdAc9C5E7055b4C863b72eA0149D8aFE",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
  ],
  "solcInputHash": "edc04b977e7a6657e6e9bb91bf92461d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract GPv2Authentication\",\"name\":\"authenticator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"Interaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"OrderInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"name\":\"PreSignature\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"Settlement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authenticator\",\"outputs\":[{\"internalType\":\"contract GPv2Authentication\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"filledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"orderUids\",\"type\":\"bytes[]\"}],\"name\":\"freeFilledAmountStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"orderUids\",\"type\":\"bytes[]\"}],\"name\":\"freePreSignatureStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"getStorageAt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"invalidateOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"preSignature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"}],\"name\":\"setPreSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"clearingPrices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sellTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GPv2Trade.Data[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct GPv2Interaction.Data[][3]\",\"name\":\"interactions\",\"type\":\"tuple[][3]\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateDelegatecall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"calldataPayload\",\"type\":\"bytes\"}],\"name\":\"simulateDelegatecallInternal\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sellTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validTo\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"appData\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct GPv2Trade.Data\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRelayer\",\"outputs\":[{\"internalType\":\"contract GPv2VaultRelayer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Gnosis Developers\",\"events\":{\"Interaction(address,uint256,bytes4)\":{\"details\":\"Event emitted for each executed interaction. For gas effeciency, only the interaction calldata selector (first 4 bytes) is included in the event. For interactions without calldata or whose calldata is shorter than 4 bytes, the selector will be `0`.\"},\"OrderInvalidated(address,bytes)\":{\"details\":\"Event emitted when an order is invalidated.\"},\"Settlement(address)\":{\"details\":\"Event emitted when a settlement complets\"},\"Trade(address,address,address,uint256,uint256,uint256,bytes)\":{\"details\":\"Event emitted for each executed trade.\"}},\"kind\":\"dev\",\"methods\":{\"freeFilledAmountStorage(bytes[])\":{\"details\":\"Free storage from the filled amounts of **expired** orders to claim a gas refund. This method can only be called as an interaction.\",\"params\":{\"orderUids\":\"The unique identifiers of the expired order to free storage for.\"}},\"freePreSignatureStorage(bytes[])\":{\"details\":\"Free storage from the pre signatures of **expired** orders to claim a gas refund. This method can only be called as an interaction.\",\"params\":{\"orderUids\":\"The unique identifiers of the expired order to free storage for.\"}},\"getStorageAt(uint256,uint256)\":{\"details\":\"Reads `length` bytes of storage in the currents contract\",\"params\":{\"length\":\"- the number of words (32 bytes) of data to read\",\"offset\":\"- the offset in the current contract's storage in words to start reading from\"},\"returns\":{\"_0\":\"the bytes that were read.\"}},\"invalidateOrder(bytes)\":{\"details\":\"Invalidate onchain an order that has been signed offline.\",\"params\":{\"orderUid\":\"The unique identifier of the order that is to be made invalid after calling this function. The user that created the order must be the the sender of this message. See [`extractOrderUidParams`] for details on orderUid.\"}},\"setPreSignature(bytes,bool)\":{\"details\":\"Sets a presignature for the specified order UID.\",\"params\":{\"orderUid\":\"The unique identifier of the order to pre-sign.\"}},\"settle(address[],uint256[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,bytes)[],(address,uint256,bytes)[][3])\":{\"details\":\"Settle the specified orders at a clearing price. Note that it is the responsibility of the caller to ensure that all GPv2 invariants are upheld for the input settlement, otherwise this call will revert. Namely: - All orders are valid and signed - Accounts have sufficient balance and approval. - Settlement contract has sufficient balance to execute trades. Note   this implies that the accumulated fees held in the contract can also   be used for settlement. This is OK since:   - Solvers need to be authorized   - Misbehaving solvers will be slashed for abusing accumulated fees for     settlement   - Critically, user orders are entirely protected\",\"params\":{\"clearingPrices\":\"An array of clearing prices where the `i`-th price is for the `i`-th token in the [`tokens`] array.\",\"interactions\":\"Smart contract interactions split into three separate lists to be run before the settlement, during the settlement and after the settlement respectively.\",\"tokens\":\"An array of ERC20 tokens to be traded in the settlement. Trades encode tokens as indices into this array.\",\"trades\":\"Trades for signed orders.\"}},\"simulateDelegatecall(address,bytes)\":{\"details\":\"Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"simulateDelegatecallInternal(address,bytes)\":{\"details\":\"Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message concatenated with the success flag of the inner call as a last byte.\",\"params\":{\"calldataPayload\":\"Calldata that should be sent to the target contract (encoded method name and arguments).\",\"targetContract\":\"Address of the contract containing the code to execute.\"}},\"swap((bytes32,uint256,uint256,uint256,bytes)[],address[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,bytes))\":{\"details\":\"Settle an order directly against Balancer V2 pools.\",\"params\":{\"swaps\":\"The Balancer V2 swap steps to use for trading.\",\"tokens\":\"An array of ERC20 tokens to be traded in the settlement. Swaps and the trade encode tokens as indices into this array.\",\"trade\":\"The trade to match directly against Balancer liquidity. The order will always be fully executed, so the trade's `executedAmount` field is used to represent a swap limit amount.\"}}},\"stateVariables\":{\"authenticator\":{\"details\":\"The authenticator is used to determine who can call the settle function. That is, only authorised solvers have the ability to invoke settlements. Any valid authenticator implements an isSolver method called by the onlySolver modifier below.\"},\"filledAmount\":{\"details\":\"Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed.\"},\"vault\":{\"details\":\"The Balancer Vault the protocol uses for managing user funds.\"},\"vaultRelayer\":{\"details\":\"The Balancer Vault relayer which can interact on behalf of users. This contract is created during deployment\"}},\"title\":\"Gnosis Protocol v2 Settlement Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/GPv2Settlement.sol\":\"GPv2Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"src/contracts/GPv2Settlement.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./GPv2VaultRelayer.sol\\\";\\nimport \\\"./interfaces/GPv2Authentication.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./libraries/GPv2Interaction.sol\\\";\\nimport \\\"./libraries/GPv2Order.sol\\\";\\nimport \\\"./libraries/GPv2Trade.sol\\\";\\nimport \\\"./libraries/GPv2Transfer.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./mixins/GPv2Signing.sol\\\";\\nimport \\\"./mixins/ReentrancyGuard.sol\\\";\\nimport \\\"./mixins/StorageAccessible.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Settlement Contract\\n/// @author Gnosis Developers\\ncontract GPv2Settlement is GPv2Signing, ReentrancyGuard, StorageAccessible {\\n    using GPv2Order for bytes;\\n    using GPv2Transfer for IVault;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n\\n    /// @dev The authenticator is used to determine who can call the settle function.\\n    /// That is, only authorised solvers have the ability to invoke settlements.\\n    /// Any valid authenticator implements an isSolver method called by the onlySolver\\n    /// modifier below.\\n    GPv2Authentication public immutable authenticator;\\n\\n    /// @dev The Balancer Vault the protocol uses for managing user funds.\\n    IVault public immutable vault;\\n\\n    /// @dev The Balancer Vault relayer which can interact on behalf of users.\\n    /// This contract is created during deployment\\n    GPv2VaultRelayer public immutable vaultRelayer;\\n\\n    /// @dev Map each user order by UID to the amount that has been filled so\\n    /// far. If this amount is larger than or equal to the amount traded in the\\n    /// order (amount sold for sell orders, amount bought for buy orders) then\\n    /// the order cannot be traded anymore. If the order is fill or kill, then\\n    /// this value is only used to determine whether the order has already been\\n    /// executed.\\n    mapping(bytes => uint256) public filledAmount;\\n\\n    /// @dev Event emitted for each executed trade.\\n    event Trade(\\n        address indexed owner,\\n        IERC20 sellToken,\\n        IERC20 buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 feeAmount,\\n        bytes orderUid\\n    );\\n\\n    /// @dev Event emitted for each executed interaction.\\n    ///\\n    /// For gas effeciency, only the interaction calldata selector (first 4\\n    /// bytes) is included in the event. For interactions without calldata or\\n    /// whose calldata is shorter than 4 bytes, the selector will be `0`.\\n    event Interaction(address indexed target, uint256 value, bytes4 selector);\\n\\n    /// @dev Event emitted when a settlement complets\\n    event Settlement(address indexed solver);\\n\\n    /// @dev Event emitted when an order is invalidated.\\n    event OrderInvalidated(address indexed owner, bytes orderUid);\\n\\n    constructor(GPv2Authentication authenticator_, IVault vault_) {\\n        authenticator = authenticator_;\\n        vault = vault_;\\n        vaultRelayer = new GPv2VaultRelayer(vault_);\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {\\n        // NOTE: Include an empty receive function so that the settlement\\n        // contract can receive Ether from contract interactions.\\n    }\\n\\n    /// @dev This modifier is called by settle function to block any non-listed\\n    /// senders from settling batches.\\n    modifier onlySolver {\\n        require(authenticator.isSolver(msg.sender), \\\"GPv2: not a solver\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to ensure that an external function is only callable as a\\n    /// settlement interaction.\\n    modifier onlyInteraction {\\n        require(address(this) == msg.sender, \\\"GPv2: not an interaction\\\");\\n        _;\\n    }\\n\\n    /// @dev Settle the specified orders at a clearing price. Note that it is\\n    /// the responsibility of the caller to ensure that all GPv2 invariants are\\n    /// upheld for the input settlement, otherwise this call will revert.\\n    /// Namely:\\n    /// - All orders are valid and signed\\n    /// - Accounts have sufficient balance and approval.\\n    /// - Settlement contract has sufficient balance to execute trades. Note\\n    ///   this implies that the accumulated fees held in the contract can also\\n    ///   be used for settlement. This is OK since:\\n    ///   - Solvers need to be authorized\\n    ///   - Misbehaving solvers will be slashed for abusing accumulated fees for\\n    ///     settlement\\n    ///   - Critically, user orders are entirely protected\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// Trades encode tokens as indices into this array.\\n    /// @param clearingPrices An array of clearing prices where the `i`-th price\\n    /// is for the `i`-th token in the [`tokens`] array.\\n    /// @param trades Trades for signed orders.\\n    /// @param interactions Smart contract interactions split into three\\n    /// separate lists to be run before the settlement, during the settlement\\n    /// and after the settlement respectively.\\n    function settle(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades,\\n        GPv2Interaction.Data[][3] calldata interactions\\n    ) external nonReentrant onlySolver {\\n        executeInteractions(interactions[0]);\\n\\n        (\\n            GPv2Transfer.Data[] memory inTransfers,\\n            GPv2Transfer.Data[] memory outTransfers\\n        ) = computeTradeExecutions(tokens, clearingPrices, trades);\\n\\n        vaultRelayer.transferFromAccounts(inTransfers);\\n\\n        executeInteractions(interactions[1]);\\n\\n        vault.transferToAccounts(outTransfers);\\n\\n        executeInteractions(interactions[2]);\\n\\n        emit Settlement(msg.sender);\\n    }\\n\\n    /// @dev Settle an order directly against Balancer V2 pools.\\n    ///\\n    /// @param swaps The Balancer V2 swap steps to use for trading.\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// Swaps and the trade encode tokens as indices into this array.\\n    /// @param trade The trade to match directly against Balancer liquidity. The\\n    /// order will always be fully executed, so the trade's `executedAmount`\\n    /// field is used to represent a swap limit amount.\\n    function swap(\\n        IVault.BatchSwapStep[] calldata swaps,\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) external nonReentrant onlySolver {\\n        RecoveredOrder memory recoveredOrder = allocateRecoveredOrder();\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n        recoverOrderFromTrade(recoveredOrder, tokens, trade);\\n\\n        IVault.SwapKind kind =\\n            order.kind == GPv2Order.KIND_SELL\\n                ? IVault.SwapKind.GIVEN_IN\\n                : IVault.SwapKind.GIVEN_OUT;\\n\\n        IVault.FundManagement memory funds;\\n        funds.sender = recoveredOrder.owner;\\n        funds.fromInternalBalance =\\n            order.sellTokenBalance == GPv2Order.BALANCE_INTERNAL;\\n        funds.recipient = payable(recoveredOrder.receiver);\\n        funds.toInternalBalance =\\n            order.buyTokenBalance == GPv2Order.BALANCE_INTERNAL;\\n\\n        int256[] memory limits = new int256[](tokens.length);\\n        uint256 limitAmount = trade.executedAmount;\\n        // NOTE: Array allocation initializes elements to 0, so we only need to\\n        // set the limits we care about. This ensures that the swap will respect\\n        // the order's limit price.\\n        if (order.kind == GPv2Order.KIND_SELL) {\\n            require(limitAmount >= order.buyAmount, \\\"GPv2: limit too low\\\");\\n            limits[trade.sellTokenIndex] = order.sellAmount.toInt256();\\n            limits[trade.buyTokenIndex] = -limitAmount.toInt256();\\n        } else {\\n            require(limitAmount <= order.sellAmount, \\\"GPv2: limit too high\\\");\\n            limits[trade.sellTokenIndex] = limitAmount.toInt256();\\n            limits[trade.buyTokenIndex] = -order.buyAmount.toInt256();\\n        }\\n\\n        GPv2Transfer.Data memory feeTransfer;\\n        feeTransfer.account = recoveredOrder.owner;\\n        feeTransfer.token = order.sellToken;\\n        feeTransfer.amount = order.feeAmount;\\n        feeTransfer.balance = order.sellTokenBalance;\\n\\n        int256[] memory tokenDeltas =\\n            vaultRelayer.batchSwapWithFee(\\n                kind,\\n                swaps,\\n                tokens,\\n                funds,\\n                limits,\\n                // NOTE: Specify a deadline to ensure that an expire order\\n                // cannot be used to trade.\\n                order.validTo,\\n                feeTransfer\\n            );\\n\\n        bytes memory orderUid = recoveredOrder.uid;\\n        uint256 executedSellAmount =\\n            tokenDeltas[trade.sellTokenIndex].toUint256();\\n        uint256 executedBuyAmount =\\n            (-tokenDeltas[trade.buyTokenIndex]).toUint256();\\n\\n        // NOTE: Check that the orders were completely filled and update their\\n        // filled amounts to avoid replaying them. The limit price and order\\n        // validity have already been verified when executing the swap through\\n        // the `limit` and `deadline` parameters.\\n        require(filledAmount[orderUid] == 0, \\\"GPv2: order filled\\\");\\n        if (order.kind == GPv2Order.KIND_SELL) {\\n            require(\\n                executedSellAmount == order.sellAmount,\\n                \\\"GPv2: sell amount not respected\\\"\\n            );\\n            filledAmount[orderUid] = order.sellAmount;\\n        } else {\\n            require(\\n                executedBuyAmount == order.buyAmount,\\n                \\\"GPv2: buy amount not respected\\\"\\n            );\\n            filledAmount[orderUid] = order.buyAmount;\\n        }\\n\\n        emit Trade(\\n            recoveredOrder.owner,\\n            order.sellToken,\\n            order.buyToken,\\n            executedSellAmount,\\n            executedBuyAmount,\\n            order.feeAmount,\\n            orderUid\\n        );\\n        emit Settlement(msg.sender);\\n    }\\n\\n    /// @dev Invalidate onchain an order that has been signed offline.\\n    ///\\n    /// @param orderUid The unique identifier of the order that is to be made\\n    /// invalid after calling this function. The user that created the order\\n    /// must be the the sender of this message. See [`extractOrderUidParams`]\\n    /// for details on orderUid.\\n    function invalidateOrder(bytes calldata orderUid) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: caller does not own order\\\");\\n        filledAmount[orderUid] = uint256(-1);\\n        emit OrderInvalidated(owner, orderUid);\\n    }\\n\\n    /// @dev Free storage from the filled amounts of **expired** orders to claim\\n    /// a gas refund. This method can only be called as an interaction.\\n    ///\\n    /// @param orderUids The unique identifiers of the expired order to free\\n    /// storage for.\\n    function freeFilledAmountStorage(bytes[] calldata orderUids)\\n        external\\n        onlyInteraction\\n    {\\n        freeOrderStorage(filledAmount, orderUids);\\n    }\\n\\n    /// @dev Free storage from the pre signatures of **expired** orders to claim\\n    /// a gas refund. This method can only be called as an interaction.\\n    ///\\n    /// @param orderUids The unique identifiers of the expired order to free\\n    /// storage for.\\n    function freePreSignatureStorage(bytes[] calldata orderUids)\\n        external\\n        onlyInteraction\\n    {\\n        freeOrderStorage(preSignature, orderUids);\\n    }\\n\\n    /// @dev Process all trades one at a time returning the computed net in and\\n    /// out transfers for the trades.\\n    ///\\n    /// This method reverts if processing of any single trade fails. See\\n    /// [`computeTradeExecution`] for more details.\\n    ///\\n    /// @param tokens An array of ERC20 tokens to be traded in the settlement.\\n    /// @param clearingPrices An array of token clearing prices.\\n    /// @param trades Trades for signed orders.\\n    /// @return inTransfers Array of in transfers of executed sell amounts.\\n    /// @return outTransfers Array of out transfers of executed buy amounts.\\n    function computeTradeExecutions(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata clearingPrices,\\n        GPv2Trade.Data[] calldata trades\\n    )\\n        internal\\n        returns (\\n            GPv2Transfer.Data[] memory inTransfers,\\n            GPv2Transfer.Data[] memory outTransfers\\n        )\\n    {\\n        RecoveredOrder memory recoveredOrder = allocateRecoveredOrder();\\n\\n        inTransfers = new GPv2Transfer.Data[](trades.length);\\n        outTransfers = new GPv2Transfer.Data[](trades.length);\\n\\n        for (uint256 i = 0; i < trades.length; i++) {\\n            GPv2Trade.Data calldata trade = trades[i];\\n\\n            recoverOrderFromTrade(recoveredOrder, tokens, trade);\\n            computeTradeExecution(\\n                recoveredOrder,\\n                clearingPrices[trade.sellTokenIndex],\\n                clearingPrices[trade.buyTokenIndex],\\n                trade.executedAmount,\\n                inTransfers[i],\\n                outTransfers[i]\\n            );\\n        }\\n    }\\n\\n    /// @dev Compute the in and out transfer amounts for a single trade.\\n    /// This function reverts if:\\n    /// - The order has expired\\n    /// - The order's limit price is not respected\\n    /// - The order gets over-filled\\n    /// - The fee discount is larger than the executed fee\\n    ///\\n    /// @param recoveredOrder The recovered order to process.\\n    /// @param sellPrice The price of the order's sell token.\\n    /// @param buyPrice The price of the order's buy token.\\n    /// @param executedAmount The portion of the order to execute. This will be\\n    /// ignored for fill-or-kill orders.\\n    /// @param inTransfer Memory location for computed executed sell amount\\n    /// transfer.\\n    /// @param outTransfer Memory location for computed executed buy amount\\n    /// transfer.\\n    function computeTradeExecution(\\n        RecoveredOrder memory recoveredOrder,\\n        uint256 sellPrice,\\n        uint256 buyPrice,\\n        uint256 executedAmount,\\n        GPv2Transfer.Data memory inTransfer,\\n        GPv2Transfer.Data memory outTransfer\\n    ) internal {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n        bytes memory orderUid = recoveredOrder.uid;\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        require(order.validTo >= block.timestamp, \\\"GPv2: order expired\\\");\\n\\n        // NOTE: The following computation is derived from the equation:\\n        // ```\\n        // amount_x * price_x = amount_y * price_y\\n        // ```\\n        // Intuitively, if a chocolate bar is 0,50\\u20ac and a beer is 4\\u20ac, 1 beer\\n        // is roughly worth 8 chocolate bars (`1 * 4 = 8 * 0.5`). From this\\n        // equation, we can derive:\\n        // - The limit price for selling `x` and buying `y` is respected iff\\n        // ```\\n        // limit_x * price_x >= limit_y * price_y\\n        // ```\\n        // - The executed amount of token `y` given some amount of `x` and\\n        //   clearing prices is:\\n        // ```\\n        // amount_y = amount_x * price_x / price_y\\n        // ```\\n\\n        require(\\n            order.sellAmount.mul(sellPrice) >= order.buyAmount.mul(buyPrice),\\n            \\\"GPv2: limit price not respected\\\"\\n        );\\n\\n        uint256 executedSellAmount;\\n        uint256 executedBuyAmount;\\n        uint256 executedFeeAmount;\\n        uint256 currentFilledAmount;\\n\\n        if (order.kind == GPv2Order.KIND_SELL) {\\n            if (order.partiallyFillable) {\\n                executedSellAmount = executedAmount;\\n                executedFeeAmount = order.feeAmount.mul(executedSellAmount).div(\\n                    order.sellAmount\\n                );\\n            } else {\\n                executedSellAmount = order.sellAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedBuyAmount = executedSellAmount.mul(sellPrice).ceilDiv(\\n                buyPrice\\n            );\\n\\n            currentFilledAmount = filledAmount[orderUid].add(\\n                executedSellAmount\\n            );\\n            require(\\n                currentFilledAmount <= order.sellAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        } else {\\n            if (order.partiallyFillable) {\\n                executedBuyAmount = executedAmount;\\n                executedFeeAmount = order.feeAmount.mul(executedBuyAmount).div(\\n                    order.buyAmount\\n                );\\n            } else {\\n                executedBuyAmount = order.buyAmount;\\n                executedFeeAmount = order.feeAmount;\\n            }\\n\\n            executedSellAmount = executedBuyAmount.mul(buyPrice).div(sellPrice);\\n\\n            currentFilledAmount = filledAmount[orderUid].add(executedBuyAmount);\\n            require(\\n                currentFilledAmount <= order.buyAmount,\\n                \\\"GPv2: order filled\\\"\\n            );\\n        }\\n\\n        executedSellAmount = executedSellAmount.add(executedFeeAmount);\\n        filledAmount[orderUid] = currentFilledAmount;\\n\\n        emit Trade(\\n            recoveredOrder.owner,\\n            order.sellToken,\\n            order.buyToken,\\n            executedSellAmount,\\n            executedBuyAmount,\\n            executedFeeAmount,\\n            orderUid\\n        );\\n\\n        inTransfer.account = recoveredOrder.owner;\\n        inTransfer.token = order.sellToken;\\n        inTransfer.amount = executedSellAmount;\\n        inTransfer.balance = order.sellTokenBalance;\\n\\n        outTransfer.account = recoveredOrder.receiver;\\n        outTransfer.token = order.buyToken;\\n        outTransfer.amount = executedBuyAmount;\\n        outTransfer.balance = order.buyTokenBalance;\\n    }\\n\\n    /// @dev Execute a list of arbitrary contract calls from this contract.\\n    /// @param interactions The list of interactions to execute.\\n    function executeInteractions(GPv2Interaction.Data[] calldata interactions)\\n        internal\\n    {\\n        for (uint256 i; i < interactions.length; i++) {\\n            GPv2Interaction.Data calldata interaction = interactions[i];\\n\\n            // To prevent possible attack on user funds, we explicitly disable\\n            // any interactions with the vault relayer contract.\\n            require(\\n                interaction.target != address(vaultRelayer),\\n                \\\"GPv2: forbidden interaction\\\"\\n            );\\n            GPv2Interaction.execute(interaction);\\n\\n            emit Interaction(\\n                interaction.target,\\n                interaction.value,\\n                GPv2Interaction.selector(interaction)\\n            );\\n        }\\n    }\\n\\n    /// @dev Claims refund for the specified storage and order UIDs.\\n    ///\\n    /// This method reverts if any of the orders are still valid.\\n    ///\\n    /// @param orderUids Order refund data for freeing storage.\\n    /// @param orderStorage Order storage mapped on a UID.\\n    function freeOrderStorage(\\n        mapping(bytes => uint256) storage orderStorage,\\n        bytes[] calldata orderUids\\n    ) internal {\\n        for (uint256 i = 0; i < orderUids.length; i++) {\\n            bytes calldata orderUid = orderUids[i];\\n\\n            (, , uint32 validTo) = orderUid.extractOrderUidParams();\\n            // solhint-disable-next-line not-rely-on-time\\n            require(validTo < block.timestamp, \\\"GPv2: order still valid\\\");\\n\\n            orderStorage[orderUid] = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36fcdfdda541269c05e51877bcc564dc413c05356f958b685dc4b73718aab287\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/GPv2VaultRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./libraries/GPv2Transfer.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Vault Relayer Contract\\n/// @author Gnosis Developers\\ncontract GPv2VaultRelayer {\\n    using GPv2Transfer for IVault;\\n\\n    /// @dev The creator of the contract which has special permissions. This\\n    /// value is set at creation time and cannot change.\\n    address private immutable creator;\\n\\n    /// @dev The vault this relayer is for.\\n    IVault private immutable vault;\\n\\n    constructor(IVault vault_) {\\n        creator = msg.sender;\\n        vault = vault_;\\n    }\\n\\n    /// @dev Modifier that ensures that a function can only be called by the\\n    /// creator of this contract.\\n    modifier onlyCreator {\\n        require(msg.sender == creator, \\\"GPv2: not creator\\\");\\n        _;\\n    }\\n\\n    /// @dev Transfers all sell amounts for the executed trades from their\\n    /// owners to the caller.\\n    ///\\n    /// This function reverts if:\\n    /// - The caller is not the creator of the vault relayer\\n    /// - Any ERC20 transfer fails\\n    ///\\n    /// @param transfers The transfers to execute.\\n    function transferFromAccounts(GPv2Transfer.Data[] calldata transfers)\\n        external\\n        onlyCreator\\n    {\\n        vault.transferFromAccounts(transfers, msg.sender);\\n    }\\n\\n    /// @dev Performs a Balancer batched swap on behalf of a user and sends a\\n    /// fee to the caller.\\n    ///\\n    /// This function reverts if:\\n    /// - The caller is not the creator of the vault relayer\\n    /// - The swap fails\\n    /// - The fee transfer fails\\n    ///\\n    /// @param kind The Balancer swap kind, this can either be `GIVEN_IN` for\\n    /// sell orders or `GIVEN_OUT` for buy orders.\\n    /// @param swaps The swaps to perform.\\n    /// @param tokens The tokens for the swaps. Swaps encode to and from tokens\\n    /// as indices into this array.\\n    /// @param funds The fund management settings, specifying the user the swap\\n    /// is being performed for as well as the recipient of the proceeds.\\n    /// @param limits Swap limits for encoding limit prices.\\n    /// @param deadline The deadline for the swap.\\n    /// @param feeTransfer The transfer data for the caller fee.\\n    /// @return tokenDeltas The executed swap amounts.\\n    function batchSwapWithFee(\\n        IVault.SwapKind kind,\\n        IVault.BatchSwapStep[] calldata swaps,\\n        IERC20[] memory tokens,\\n        IVault.FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline,\\n        GPv2Transfer.Data calldata feeTransfer\\n    ) external onlyCreator returns (int256[] memory tokenDeltas) {\\n        tokenDeltas = vault.batchSwap(\\n            kind,\\n            swaps,\\n            tokens,\\n            funds,\\n            limits,\\n            deadline\\n        );\\n        vault.fastTransferFromAccount(feeTransfer, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x38aac5e65f9310191ccf3643f1098639e21e4156a8c38a6be4aaece9c7e771ab\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interfaces/GPv2Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Authentication Interface\\n/// @author Gnosis Developers\\ninterface GPv2Authentication {\\n    /// @dev determines whether the provided address is an authenticated solver.\\n    /// @param prospectiveSolver the address of prospective solver.\\n    /// @return true when prospectiveSolver is an authenticated solver, otherwise false.\\n    function isSolver(address prospectiveSolver) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xffbd3b9ca8cb5b86c3d7f7ce706755dd6acdc86ef9acefcb5bae375ea50628e3\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interfaces/GPv2EIP1271.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nlibrary GPv2EIP1271 {\\n    /// @dev Value returned by a call to `isValidSignature` if the signature\\n    /// was verified successfully. The value is defined in EIP-1271 as:\\n    /// bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))\\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\\n}\\n\\n/// @title EIP1271 Interface\\n/// @dev Standardized interface for an implementation of smart contract\\n/// signatures as described in EIP-1271. The code that follows is identical to\\n/// the code in the standard with the exception of formatting and syntax\\n/// changes to adapt the code to our Solidity version.\\ninterface EIP1271Verifier {\\n    /// @dev Should return whether the signature provided is valid for the\\n    /// provided data\\n    /// @param _hash      Hash of the data to be signed\\n    /// @param _signature Signature byte array associated with _data\\n    ///\\n    /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for\\n    /// solc > 0.5)\\n    /// MUST allow external calls\\n    ///\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        view\\n        returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x18a47c90b82bb64e479c84b8ffd469621be08d11a608137c23f92739d1a82f18\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Vendored from OpenZeppelin contracts with minor modifications:\\n// - Modified Solidity version\\n// - Formatted code\\n// - Added `name`, `symbol` and `decimals` function declarations\\n// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/token/ERC20/IERC20.sol>\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals the token uses.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x4a95047091d16cffb314c08470c60ea3759fa4382e0fa31bb15616e09f7a1775\",\"license\":\"MIT\"},\"src/contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Minimal interface for the Vault core contract only containing methods\\n * used by Gnosis Protocol V2. Original source:\\n * <https://github.com/balancer-labs/balancer-core-v2/blob/v1.0.0/contracts/vault/interfaces/IVault.sol>\\n */\\ninterface IVault {\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IERC20 asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind {\\n        DEPOSIT_INTERNAL,\\n        WITHDRAW_INTERNAL,\\n        TRANSFER_INTERNAL,\\n        TRANSFER_EXTERNAL\\n    }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind {GIVEN_IN, GIVEN_OUT}\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IERC20 assetIn;\\n        IERC20 assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IERC20[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x5752de4fd82c87c2b2b4b3ece26bf194c2bf8875100326023de11f35b140edbf\",\"license\":\"GPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Interaction.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\n/// @title Gnosis Protocol v2 Interaction Library\\n/// @author Gnosis Developers\\nlibrary GPv2Interaction {\\n    /// @dev Interaction data for performing arbitrary contract interactions.\\n    /// Submitted to [`GPv2Settlement.settle`] for code execution.\\n    struct Data {\\n        address target;\\n        uint256 value;\\n        bytes callData;\\n    }\\n\\n    /// @dev Execute an arbitrary contract interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    function execute(Data calldata interaction) internal {\\n        address target = interaction.target;\\n        uint256 value = interaction.value;\\n        bytes calldata callData = interaction.callData;\\n\\n        // NOTE: Use assembly to call the interaction instead of a low level\\n        // call for two reasons:\\n        // - We don't want to copy the return data, since we discard it for\\n        // interactions.\\n        // - Solidity will under certain conditions generate code to copy input\\n        // calldata twice to memory (the second being a \\\"memcopy loop\\\").\\n        // <https://github.com/gnosis/gp-v2-contracts/pull/417#issuecomment-775091258>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            calldatacopy(freeMemoryPointer, callData.offset, callData.length)\\n            if iszero(\\n                call(\\n                    gas(),\\n                    target,\\n                    value,\\n                    freeMemoryPointer,\\n                    callData.length,\\n                    0,\\n                    0\\n                )\\n            ) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Extracts the Solidity ABI selector for the specified interaction.\\n    ///\\n    /// @param interaction Interaction data.\\n    /// @return result The 4 byte function selector of the call encoded in\\n    /// this interaction.\\n    function selector(Data calldata interaction)\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        bytes calldata callData = interaction.callData;\\n        if (callData.length >= 4) {\\n            // NOTE: Read the first word of the interaction's calldata. The\\n            // value does not need to be shifted since `bytesN` values are left\\n            // aligned, and the value does not need to be masked since masking\\n            // occurs when the value is accessed and not stored:\\n            // <https://docs.soliditylang.org/en/v0.7.6/abi-spec.html#encoding-of-indexed-event-parameters>\\n            // <https://docs.soliditylang.org/en/v0.7.6/assembly.html#access-to-external-variables-functions-and-libraries>\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                result := calldataload(callData.offset)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf885758d9e6531644fae272ee863942d115a1b92434abae69a2c54cec3a7bb8e\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Order.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Order Library\\n/// @author Gnosis Developers\\nlibrary GPv2Order {\\n    /// @dev The complete data for a Gnosis Protocol order. This struct contains\\n    /// all order parameters that are signed for submitting to GP.\\n    struct Data {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        bytes32 kind;\\n        bool partiallyFillable;\\n        bytes32 sellTokenBalance;\\n        bytes32 buyTokenBalance;\\n    }\\n\\n    /// @dev The order EIP-712 type hash for the [`GPv2Order.Data`] struct.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\n    ///     \\\"Order(\\\" +\\n    ///         \\\"address sellToken,\\\" +\\n    ///         \\\"address buyToken,\\\" +\\n    ///         \\\"address receiver,\\\" +\\n    ///         \\\"uint256 sellAmount,\\\" +\\n    ///         \\\"uint256 buyAmount,\\\" +\\n    ///         \\\"uint32 validTo,\\\" +\\n    ///         \\\"bytes32 appData,\\\" +\\n    ///         \\\"uint256 feeAmount,\\\" +\\n    ///         \\\"string kind,\\\" +\\n    ///         \\\"bool partiallyFillable\\\" +\\n    ///         \\\"string sellTokenBalance\\\" +\\n    ///         \\\"string buyTokenBalance\\\" +\\n    ///     \\\")\\\"\\n    /// )\\n    /// ```\\n    bytes32 internal constant TYPE_HASH =\\n        hex\\\"d5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489\\\";\\n\\n    /// @dev The marker value for a sell order for computing the order struct\\n    /// hash. This allows the EIP-712 compatible wallets to display a\\n    /// descriptive string for the order kind (instead of 0 or 1).\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"sell\\\")\\n    /// ```\\n    bytes32 internal constant KIND_SELL =\\n        hex\\\"f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775\\\";\\n\\n    /// @dev The OrderKind marker value for a buy order for computing the order\\n    /// struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"buy\\\")\\n    /// ```\\n    bytes32 internal constant KIND_BUY =\\n        hex\\\"6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc\\\";\\n\\n    /// @dev The TokenBalance marker value for using direct ERC20 balances for\\n    /// computing the order struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"erc20\\\")\\n    /// ```\\n    bytes32 internal constant BALANCE_ERC20 =\\n        hex\\\"5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9\\\";\\n\\n    /// @dev The TokenBalance marker value for using Balancer Vault external\\n    /// balances (in order to re-use Vault ERC20 approvals) for computing the\\n    /// order struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"external\\\")\\n    /// ```\\n    bytes32 internal constant BALANCE_EXTERNAL =\\n        hex\\\"abee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea0632\\\";\\n\\n    /// @dev The TokenBalance marker value for using Balancer Vault internal\\n    /// balances for computing the order struct hash.\\n    ///\\n    /// This value is pre-computed from the following expression:\\n    /// ```\\n    /// keccak256(\\\"internal\\\")\\n    /// ```\\n    bytes32 internal constant BALANCE_INTERNAL =\\n        hex\\\"4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce\\\";\\n\\n    /// @dev Marker address used to indicate that the receiver of the trade\\n    /// proceeds should the owner of the order.\\n    ///\\n    /// This is chosen to be `address(0)` for gas efficiency as it is expected\\n    /// to be the most common case.\\n    address internal constant RECEIVER_SAME_AS_OWNER = address(0);\\n\\n    /// @dev The byte length of an order unique identifier.\\n    uint256 internal constant UID_LENGTH = 56;\\n\\n    /// @dev Returns the actual receiver for an order. This function checks\\n    /// whether or not the [`receiver`] field uses the marker value to indicate\\n    /// it is the same as the order owner.\\n    ///\\n    /// @return receiver The actual receiver of trade proceeds.\\n    function actualReceiver(Data memory order, address owner)\\n        internal\\n        pure\\n        returns (address receiver)\\n    {\\n        if (order.receiver == RECEIVER_SAME_AS_OWNER) {\\n            receiver = owner;\\n        } else {\\n            receiver = order.receiver;\\n        }\\n    }\\n\\n    /// @dev Return the EIP-712 signing hash for the specified order.\\n    ///\\n    /// @param order The order to compute the EIP-712 signing hash for.\\n    /// @param domainSeparator The EIP-712 domain separator to use.\\n    /// @return orderDigest The 32 byte EIP-712 struct hash.\\n    function hash(Data memory order, bytes32 domainSeparator)\\n        internal\\n        pure\\n        returns (bytes32 orderDigest)\\n    {\\n        bytes32 structHash;\\n\\n        // NOTE: Compute the EIP-712 order struct hash in place. As suggested\\n        // in the EIP proposal, noting that the order struct has 10 fields, and\\n        // including the type hash `(12 + 1) * 32 = 416` bytes to hash.\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#rationale-for-encodedata>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let dataStart := sub(order, 32)\\n            let temp := mload(dataStart)\\n            mstore(dataStart, TYPE_HASH)\\n            structHash := keccak256(dataStart, 416)\\n            mstore(dataStart, temp)\\n        }\\n\\n        // NOTE: Now that we have the struct hash, compute the EIP-712 signing\\n        // hash using scratch memory past the free memory pointer. The signing\\n        // hash is computed from `\\\"\\\\x19\\\\x01\\\" || domainSeparator || structHash`.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory>\\n        // <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#specification>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(freeMemoryPointer, 2), domainSeparator)\\n            mstore(add(freeMemoryPointer, 34), structHash)\\n            orderDigest := keccak256(freeMemoryPointer, 66)\\n        }\\n    }\\n\\n    /// @dev Packs order UID parameters into the specified memory location. The\\n    /// result is equivalent to `abi.encodePacked(...)` with the difference that\\n    /// it allows re-using the memory for packing the order UID.\\n    ///\\n    /// This function reverts if the order UID buffer is not the correct size.\\n    ///\\n    /// @param orderUid The buffer pack the order UID parameters into.\\n    /// @param orderDigest The EIP-712 struct digest derived from the order\\n    /// parameters.\\n    /// @param owner The address of the user who owns this order.\\n    /// @param validTo The epoch time at which the order will stop being valid.\\n    function packOrderUidParams(\\n        bytes memory orderUid,\\n        bytes32 orderDigest,\\n        address owner,\\n        uint32 validTo\\n    ) internal pure {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: uid buffer overflow\\\");\\n\\n        // NOTE: Write the order UID to the allocated memory buffer. The order\\n        // parameters are written to memory in **reverse order** as memory\\n        // operations write 32-bytes at a time and we want to use a packed\\n        // encoding. This means, for example, that after writing the value of\\n        // `owner` to bytes `20:52`, writing the `orderDigest` to bytes `0:32`\\n        // will **overwrite** bytes `20:32`. This is desirable as addresses are\\n        // only 20 bytes and `20:32` should be `0`s:\\n        //\\n        //        |           1111111111222222222233333333334444444444555555\\n        //   byte | 01234567890123456789012345678901234567890123456789012345\\n        // -------+---------------------------------------------------------\\n        //  field | [.........orderDigest..........][......owner.......][vT]\\n        // -------+---------------------------------------------------------\\n        // mstore |                         [000000000000000000000000000.vT]\\n        //        |                     [00000000000.......owner.......]\\n        //        | [.........orderDigest..........]\\n        //\\n        // Additionally, since Solidity `bytes memory` are length prefixed,\\n        // 32 needs to be added to all the offsets.\\n        //\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(add(orderUid, 56), validTo)\\n            mstore(add(orderUid, 52), owner)\\n            mstore(add(orderUid, 32), orderDigest)\\n        }\\n    }\\n\\n    /// @dev Extracts specific order information from the standardized unique\\n    /// order id of the protocol.\\n    ///\\n    /// @param orderUid The unique identifier used to represent an order in\\n    /// the protocol. This uid is the packed concatenation of the order digest,\\n    /// the validTo order parameter and the address of the user who created the\\n    /// order. It is used by the user to interface with the contract directly,\\n    /// and not by calls that are triggered by the solvers.\\n    /// @return orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the user who owns this order.\\n    /// @return validTo The epoch time at which the order will stop being valid.\\n    function extractOrderUidParams(bytes calldata orderUid)\\n        internal\\n        pure\\n        returns (\\n            bytes32 orderDigest,\\n            address owner,\\n            uint32 validTo\\n        )\\n    {\\n        require(orderUid.length == UID_LENGTH, \\\"GPv2: invalid uid\\\");\\n\\n        // Use assembly to efficiently decode packed calldata.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            orderDigest := calldataload(orderUid.offset)\\n            owner := shr(96, calldataload(add(orderUid.offset, 32)))\\n            validTo := shr(224, calldataload(add(orderUid.offset, 52)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3cd5fd947876e495cfeabb15515e90c841844d92f6d07658c8213f967bf69ac6\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract that notably\\n/// does not revert when calling a non-contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTansferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(\\n                add(freeMemoryPointer, 4),\\n                and(from, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(freeMemoryPointer, 36),\\n                and(to, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTansferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTansferResult(IERC20 token)\\n        private\\n        view\\n        returns (bool success)\\n    {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n                // Non-standard ERC20 transfer without return.\\n                case 0 {\\n                    // NOTE: When the return data size is 0, verify that there\\n                    // is code at the address. This is done in order to maintain\\n                    // compatibility with Solidity calling conventions.\\n                    // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                    if iszero(extcodesize(token)) {\\n                        revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                    }\\n\\n                    success := 1\\n                }\\n                // Standard ERC20 transfer returning boolean success value.\\n                case 32 {\\n                    returndatacopy(0, 0, returndatasize())\\n\\n                    // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                    // as `true` for a boolean. In order to stay compatible with\\n                    // OpenZeppelin's `SafeERC20` library which is known to work\\n                    // with the existing ERC20 implementation we care about,\\n                    // make sure we return success for any non-zero return value\\n                    // from the `transfer*` call.\\n                    success := iszero(iszero(mload(0)))\\n                }\\n                default {\\n                    revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42821e169dcf25d4e018299d02e930333b4c6ac846c8eb93d2704d2ceecd3af8\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Trade.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../mixins/GPv2Signing.sol\\\";\\nimport \\\"./GPv2Order.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Trade Library.\\n/// @author Gnosis Developers\\nlibrary GPv2Trade {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev A struct representing a trade to be executed as part a batch\\n    /// settlement.\\n    struct Data {\\n        uint256 sellTokenIndex;\\n        uint256 buyTokenIndex;\\n        address receiver;\\n        uint256 sellAmount;\\n        uint256 buyAmount;\\n        uint32 validTo;\\n        bytes32 appData;\\n        uint256 feeAmount;\\n        uint256 flags;\\n        uint256 executedAmount;\\n        bytes signature;\\n    }\\n\\n    /// @dev Extracts the order data and signing scheme for the specified trade.\\n    ///\\n    /// @param trade The trade.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param order The memory location to extract the order data to.\\n    function extractOrder(\\n        Data calldata trade,\\n        IERC20[] calldata tokens,\\n        GPv2Order.Data memory order\\n    ) internal pure returns (GPv2Signing.Scheme signingScheme) {\\n        order.sellToken = tokens[trade.sellTokenIndex];\\n        order.buyToken = tokens[trade.buyTokenIndex];\\n        order.receiver = trade.receiver;\\n        order.sellAmount = trade.sellAmount;\\n        order.buyAmount = trade.buyAmount;\\n        order.validTo = trade.validTo;\\n        order.appData = trade.appData;\\n        order.feeAmount = trade.feeAmount;\\n        (\\n            order.kind,\\n            order.partiallyFillable,\\n            order.sellTokenBalance,\\n            order.buyTokenBalance,\\n            signingScheme\\n        ) = extractFlags(trade.flags);\\n    }\\n\\n    /// @dev Decodes trade flags.\\n    ///\\n    /// Trade flags are used to tightly encode information on how to decode\\n    /// an order. Examples that directly affect the structure of an order are\\n    /// the kind of order (either a sell or a buy order) as well as whether the\\n    /// order is partially fillable or if it is a \\\"fill-or-kill\\\" order. It also\\n    /// encodes the signature scheme used to validate the order. As the most\\n    /// likely values are fill-or-kill sell orders by an externally owned\\n    /// account, the flags are chosen such that `0x00` represents this kind of\\n    /// order. The flags byte uses the following format:\\n    ///\\n    /// ```\\n    /// bit | 31 ...   | 6 | 5 | 4 | 3 | 2 | 1 | 0 |\\n    /// ----+----------+---+---+-------+---+---+\\n    ///     | reserved | *   * | * | *   * | * | * |\\n    ///                  |   |   |   |   |   |   |\\n    ///                  |   |   |   |   |   |   +---- order kind bit, 0 for a sell order\\n    ///                  |   |   |   |   |   |         and 1 for a buy order\\n    ///                  |   |   |   |   |   |\\n    ///                  |   |   |   |   |   +-------- order fill bit, 0 for fill-or-kill\\n    ///                  |   |   |   |   |             and 1 for a partially fillable order\\n    ///                  |   |   |   |   |\\n    ///                  |   |   |   +---+------------ use internal sell token balance bit:\\n    ///                  |   |   |                     0x: ERC20 token balance\\n    ///                  |   |   |                     10: external Balancer Vault balance\\n    ///                  |   |   |                     11: internal Balancer Vault balance\\n    ///                  |   |   |\\n    ///                  |   |   +-------------------- use buy token balance bit\\n    ///                  |   |                         0: ERC20 token balance\\n    ///                  |   |                         1: internal Balancer Vault balance\\n    ///                  |   |\\n    ///                  +---+------------------------ signature scheme bits:\\n    ///                                                00: EIP-712\\n    ///                                                01: eth_sign\\n    ///                                                10: EIP-1271\\n    ///                                                11: pre_sign\\n    /// ```\\n    function extractFlags(uint256 flags)\\n        internal\\n        pure\\n        returns (\\n            bytes32 kind,\\n            bool partiallyFillable,\\n            bytes32 sellTokenBalance,\\n            bytes32 buyTokenBalance,\\n            GPv2Signing.Scheme signingScheme\\n        )\\n    {\\n        if (flags & 0x01 == 0) {\\n            kind = GPv2Order.KIND_SELL;\\n        } else {\\n            kind = GPv2Order.KIND_BUY;\\n        }\\n        partiallyFillable = flags & 0x02 != 0;\\n        if (flags & 0x08 == 0) {\\n            sellTokenBalance = GPv2Order.BALANCE_ERC20;\\n        } else if (flags & 0x04 == 0) {\\n            sellTokenBalance = GPv2Order.BALANCE_EXTERNAL;\\n        } else {\\n            sellTokenBalance = GPv2Order.BALANCE_INTERNAL;\\n        }\\n        if (flags & 0x10 == 0) {\\n            buyTokenBalance = GPv2Order.BALANCE_ERC20;\\n        } else {\\n            buyTokenBalance = GPv2Order.BALANCE_INTERNAL;\\n        }\\n\\n        // NOTE: Take advantage of the fact that Solidity will revert if the\\n        // following expression does not produce a valid enum value. This means\\n        // we check here that the leading reserved bits must be 0.\\n        signingScheme = GPv2Signing.Scheme(flags >> 5);\\n    }\\n}\\n\",\"keccak256\":\"0x9b4a5519f908b55a14a7752e42f6a786af4790a7dda0b4ba0f4ff9162d03f746\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/GPv2Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"./GPv2Order.sol\\\";\\nimport \\\"./GPv2SafeERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Transfers\\n/// @author Gnosis Developers\\nlibrary GPv2Transfer {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /// @dev Transfer data.\\n    struct Data {\\n        address account;\\n        IERC20 token;\\n        uint256 amount;\\n        bytes32 balance;\\n    }\\n\\n    /// @dev Ether marker address used to indicate an Ether transfer.\\n    address internal constant BUY_ETH_ADDRESS =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @dev Execute the specified transfer from the specified account to a\\n    /// recipient. The recipient will either receive internal Vault balances or\\n    /// ERC20 token balances depending on whether the account is using internal\\n    /// balances or not.\\n    ///\\n    /// This method is used for transferring fees to the settlement contract\\n    /// when settling a single order directly with Balancer.\\n    ///\\n    /// Note that this method is subtly different from `transferFromAccounts`\\n    /// with a single transfer with respect to how it deals with internal\\n    /// balances. Specifically, this method will perform an **internal balance\\n    /// transfer to the settlement contract instead of a withdrawal to the\\n    /// external balance of the settlement contract** for trades that specify\\n    /// trading with internal balances. This is done as a gas optimization in\\n    /// the single order \\\"fast-path\\\".\\n    ///\\n    /// @param vault The Balancer vault to use.\\n    /// @param transfer The transfer to perform specifying the sender account.\\n    /// @param recipient The recipient for the transfer.\\n    function fastTransferFromAccount(\\n        IVault vault,\\n        Data calldata transfer,\\n        address recipient\\n    ) internal {\\n        require(\\n            address(transfer.token) != BUY_ETH_ADDRESS,\\n            \\\"GPv2: cannot transfer native ETH\\\"\\n        );\\n\\n        if (transfer.balance == GPv2Order.BALANCE_ERC20) {\\n            transfer.token.safeTransferFrom(\\n                transfer.account,\\n                recipient,\\n                transfer.amount\\n            );\\n        } else {\\n            IVault.UserBalanceOp[] memory balanceOps =\\n                new IVault.UserBalanceOp[](1);\\n\\n            IVault.UserBalanceOp memory balanceOp = balanceOps[0];\\n            balanceOp.kind = transfer.balance == GPv2Order.BALANCE_EXTERNAL\\n                ? IVault.UserBalanceOpKind.TRANSFER_EXTERNAL\\n                : IVault.UserBalanceOpKind.TRANSFER_INTERNAL;\\n            balanceOp.asset = transfer.token;\\n            balanceOp.amount = transfer.amount;\\n            balanceOp.sender = transfer.account;\\n            balanceOp.recipient = payable(recipient);\\n\\n            vault.manageUserBalance(balanceOps);\\n        }\\n    }\\n\\n    /// @dev Execute the specified transfers from the specified accounts to a\\n    /// single recipient. The recipient will receive all transfers as ERC20\\n    /// token balances, regardless of whether or not the accounts are using\\n    /// internal Vault balances.\\n    ///\\n    /// This method is used for accumulating user balances into the settlement\\n    /// contract.\\n    ///\\n    /// @param vault The Balancer vault to use.\\n    /// @param transfers The batched transfers to perform specifying the\\n    /// sender accounts.\\n    /// @param recipient The single recipient for all the transfers.\\n    function transferFromAccounts(\\n        IVault vault,\\n        Data[] calldata transfers,\\n        address recipient\\n    ) internal {\\n        // NOTE: Allocate buffer of Vault balance operations large enough to\\n        // hold all GP transfers. This is done to avoid re-allocations (which\\n        // are gas inefficient) while still allowing all transfers to be batched\\n        // into a single Vault call.\\n        IVault.UserBalanceOp[] memory balanceOps =\\n            new IVault.UserBalanceOp[](transfers.length);\\n        uint256 balanceOpCount = 0;\\n\\n        for (uint256 i = 0; i < transfers.length; i++) {\\n            Data calldata transfer = transfers[i];\\n            require(\\n                address(transfer.token) != BUY_ETH_ADDRESS,\\n                \\\"GPv2: cannot transfer native ETH\\\"\\n            );\\n\\n            if (transfer.balance == GPv2Order.BALANCE_ERC20) {\\n                transfer.token.safeTransferFrom(\\n                    transfer.account,\\n                    recipient,\\n                    transfer.amount\\n                );\\n            } else {\\n                IVault.UserBalanceOp memory balanceOp =\\n                    balanceOps[balanceOpCount++];\\n                balanceOp.kind = transfer.balance == GPv2Order.BALANCE_EXTERNAL\\n                    ? IVault.UserBalanceOpKind.TRANSFER_EXTERNAL\\n                    : IVault.UserBalanceOpKind.WITHDRAW_INTERNAL;\\n                balanceOp.asset = transfer.token;\\n                balanceOp.amount = transfer.amount;\\n                balanceOp.sender = transfer.account;\\n                balanceOp.recipient = payable(recipient);\\n            }\\n        }\\n\\n        if (balanceOpCount > 0) {\\n            truncateBalanceOpsArray(balanceOps, balanceOpCount);\\n            vault.manageUserBalance(balanceOps);\\n        }\\n    }\\n\\n    /// @dev Execute the specified transfers to their respective accounts.\\n    ///\\n    /// This method is used for paying out trade proceeds from the settlement\\n    /// contract.\\n    ///\\n    /// @param vault The Balancer vault to use.\\n    /// @param transfers The batched transfers to perform.\\n    function transferToAccounts(IVault vault, Data[] memory transfers)\\n        internal\\n    {\\n        IVault.UserBalanceOp[] memory balanceOps =\\n            new IVault.UserBalanceOp[](transfers.length);\\n        uint256 balanceOpCount = 0;\\n\\n        for (uint256 i = 0; i < transfers.length; i++) {\\n            Data memory transfer = transfers[i];\\n\\n            if (address(transfer.token) == BUY_ETH_ADDRESS) {\\n                require(\\n                    transfer.balance != GPv2Order.BALANCE_INTERNAL,\\n                    \\\"GPv2: unsupported internal ETH\\\"\\n                );\\n                payable(transfer.account).transfer(transfer.amount);\\n            } else if (transfer.balance == GPv2Order.BALANCE_ERC20) {\\n                transfer.token.safeTransfer(transfer.account, transfer.amount);\\n            } else {\\n                IVault.UserBalanceOp memory balanceOp =\\n                    balanceOps[balanceOpCount++];\\n                balanceOp.kind = IVault.UserBalanceOpKind.DEPOSIT_INTERNAL;\\n                balanceOp.asset = transfer.token;\\n                balanceOp.amount = transfer.amount;\\n                balanceOp.sender = address(this);\\n                balanceOp.recipient = payable(transfer.account);\\n            }\\n        }\\n\\n        if (balanceOpCount > 0) {\\n            truncateBalanceOpsArray(balanceOps, balanceOpCount);\\n            vault.manageUserBalance(balanceOps);\\n        }\\n    }\\n\\n    /// @dev Truncate a Vault balance operation array to its actual size.\\n    ///\\n    /// This method **does not** check whether or not the new length is valid,\\n    /// and specifying a size that is larger than the array's actual length is\\n    /// undefined behaviour.\\n    ///\\n    /// @param balanceOps The memory array of balance operations to truncate.\\n    /// @param newLength The new length to set.\\n    function truncateBalanceOpsArray(\\n        IVault.UserBalanceOp[] memory balanceOps,\\n        uint256 newLength\\n    ) private pure {\\n        // NOTE: Truncate the vault transfers array to the specified length.\\n        // This is done by setting the array's length which occupies the first\\n        // word in memory pointed to by the `balanceOps` memory variable.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(balanceOps, newLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbd55c1babc9837764b4ce08ac8b274133c96da5516aba3885fbb8ddfa8254c2c\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Vendored from OpenZeppelin contracts with minor modifications:\\n// - Modified Solidity version\\n// - Formatted code\\n// - Shortened revert messages\\n// - Removed unused methods\\n// - Convert to `type(*).*` notation\\n// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/SafeCast.sol>\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: not positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(\\n            value <= uint256(type(int256).max),\\n            \\\"SafeCast: int256 overflow\\\"\\n        );\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe24860c6c317368a162217c1df4a0ec1e5820bbe54ec1d7785c25b8706669e25\",\"license\":\"MIT\"},\"src/contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Vendored from OpenZeppelin contracts with minor modifications:\\n// - Modified Solidity version\\n// - Formatted code\\n// - Shortened some revert messages\\n// - Removed unused methods\\n// - Added `ceilDiv` method\\n// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/math/SafeMath.sol>\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: mul overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by 0\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling integer division of two unsigned integers,\\n     * reverting on division by zero. The result is rounded towards up the\\n     * nearest integer, instead of truncating the fractional part.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     * - The sum of the dividend and divisor cannot overflow.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: ceiling division by 0\\\");\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x490ccb7dbcfbcff6e09cde562c97a2b4d9031cf088bd5ac4a443549ec5f554b9\",\"license\":\"MIT\"},\"src/contracts/mixins/GPv2Signing.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.7.6;\\n\\nimport \\\"../interfaces/GPv2EIP1271.sol\\\";\\nimport \\\"../libraries/GPv2Order.sol\\\";\\nimport \\\"../libraries/GPv2Trade.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Signing Library.\\n/// @author Gnosis Developers\\nabstract contract GPv2Signing {\\n    using GPv2Order for GPv2Order.Data;\\n    using GPv2Order for bytes;\\n\\n    /// @dev Recovered trade data containing the extracted order and the\\n    /// recovered owner address.\\n    struct RecoveredOrder {\\n        GPv2Order.Data data;\\n        bytes uid;\\n        address owner;\\n        address receiver;\\n    }\\n\\n    /// @dev Signing scheme used for recovery.\\n    enum Scheme {Eip712, EthSign, Eip1271, PreSign}\\n\\n    /// @dev The EIP-712 domain type hash used for computing the domain\\n    /// separator.\\n    bytes32 private constant DOMAIN_TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @dev The EIP-712 domain name used for computing the domain separator.\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"Gnosis Protocol\\\");\\n\\n    /// @dev The EIP-712 domain version used for computing the domain separator.\\n    bytes32 private constant DOMAIN_VERSION = keccak256(\\\"v2\\\");\\n\\n    /// @dev Marker value indicating an order is pre-signed.\\n    uint256 private constant PRE_SIGNED =\\n        uint256(keccak256(\\\"GPv2Signing.Scheme.PreSign\\\"));\\n\\n    /// @dev The domain separator used for signing orders that gets mixed in\\n    /// making signatures for different domains incompatible. This domain\\n    /// separator is computed following the EIP-712 standard and has replay\\n    /// protection mixed in so that signed orders are only valid for specific\\n    /// GPv2 contracts.\\n    bytes32 public immutable domainSeparator;\\n\\n    /// @dev Storage indicating whether or not an order has been signed by a\\n    /// particular address.\\n    mapping(bytes => uint256) public preSignature;\\n\\n    /// @dev Event that is emitted when an account either pre-signs an order or\\n    /// revokes an existing pre-signature.\\n    event PreSignature(address indexed owner, bytes orderUid, bool signed);\\n\\n    constructor() {\\n        // NOTE: Currently, the only way to get the chain ID in solidity is\\n        // using assembly.\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                DOMAIN_NAME,\\n                DOMAIN_VERSION,\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /// @dev Sets a presignature for the specified order UID.\\n    ///\\n    /// @param orderUid The unique identifier of the order to pre-sign.\\n    function setPreSignature(bytes calldata orderUid, bool signed) external {\\n        (, address owner, ) = orderUid.extractOrderUidParams();\\n        require(owner == msg.sender, \\\"GPv2: cannot presign order\\\");\\n        if (signed) {\\n            preSignature[orderUid] = PRE_SIGNED;\\n        } else {\\n            preSignature[orderUid] = 0;\\n        }\\n        emit PreSignature(owner, orderUid, signed);\\n    }\\n\\n    /// @dev Returns an empty recovered order with a pre-allocated buffer for\\n    /// packing the unique identifier.\\n    ///\\n    /// @return recoveredOrder The empty recovered order data.\\n    function allocateRecoveredOrder()\\n        internal\\n        pure\\n        returns (RecoveredOrder memory recoveredOrder)\\n    {\\n        recoveredOrder.uid = new bytes(GPv2Order.UID_LENGTH);\\n    }\\n\\n    /// @dev Extracts order data and recovers the signer from the specified\\n    /// trade.\\n    ///\\n    /// @param recoveredOrder Memory location used for writing the recovered order data.\\n    /// @param tokens The list of tokens included in the settlement. The token\\n    /// indices in the trade parameters map to tokens in this array.\\n    /// @param trade The trade data to recover the order data from.\\n    function recoverOrderFromTrade(\\n        RecoveredOrder memory recoveredOrder,\\n        IERC20[] calldata tokens,\\n        GPv2Trade.Data calldata trade\\n    ) internal view {\\n        GPv2Order.Data memory order = recoveredOrder.data;\\n\\n        Scheme signingScheme = GPv2Trade.extractOrder(trade, tokens, order);\\n        (bytes32 orderDigest, address owner) =\\n            recoverOrderSigner(order, signingScheme, trade.signature);\\n\\n        recoveredOrder.uid.packOrderUidParams(\\n            orderDigest,\\n            owner,\\n            order.validTo\\n        );\\n        recoveredOrder.owner = owner;\\n        recoveredOrder.receiver = order.actualReceiver(owner);\\n    }\\n\\n    /// @dev The length of any signature from an externally owned account.\\n    uint256 private constant ECDSA_SIGNATURE_LENGTH = 65;\\n\\n    /// @dev Recovers an order's signer from the specified order and signature.\\n    ///\\n    /// @param order The order to recover a signature for.\\n    /// @param signingScheme The signing scheme.\\n    /// @param signature The signature bytes.\\n    /// @return orderDigest The computed order hash.\\n    /// @return owner The recovered address from the specified signature.\\n    function recoverOrderSigner(\\n        GPv2Order.Data memory order,\\n        Scheme signingScheme,\\n        bytes calldata signature\\n    ) internal view returns (bytes32 orderDigest, address owner) {\\n        orderDigest = order.hash(domainSeparator);\\n        if (signingScheme == Scheme.Eip712) {\\n            owner = recoverEip712Signer(orderDigest, signature);\\n        } else if (signingScheme == Scheme.EthSign) {\\n            owner = recoverEthsignSigner(orderDigest, signature);\\n        } else if (signingScheme == Scheme.Eip1271) {\\n            owner = recoverEip1271Signer(orderDigest, signature);\\n        } else {\\n            // signingScheme == Scheme.PreSign\\n            owner = recoverPreSigner(orderDigest, signature, order.validTo);\\n        }\\n    }\\n\\n    /// @dev Perform an ECDSA recover for the specified message and calldata\\n    /// signature.\\n    ///\\n    /// The signature is encoded by tighyly packing the following struct:\\n    /// ```\\n    /// struct EncodedSignature {\\n    ///     bytes32 r;\\n    ///     bytes32 s;\\n    ///     uint8 v;\\n    /// }\\n    /// ```\\n    ///\\n    /// @param message The signed message.\\n    /// @param encodedSignature The encoded signature.\\n    function ecdsaRecover(bytes32 message, bytes calldata encodedSignature)\\n        internal\\n        pure\\n        returns (address signer)\\n    {\\n        require(\\n            encodedSignature.length == ECDSA_SIGNATURE_LENGTH,\\n            \\\"GPv2: malformed ecdsa signature\\\"\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // NOTE: Use assembly to efficiently decode signature data.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // r = uint256(encodedSignature[0:32])\\n            r := calldataload(encodedSignature.offset)\\n            // s = uint256(encodedSignature[32:64])\\n            s := calldataload(add(encodedSignature.offset, 32))\\n            // v = uint8(encodedSignature[64])\\n            v := shr(248, calldataload(add(encodedSignature.offset, 64)))\\n        }\\n\\n        signer = ecrecover(message, v, r, s);\\n        require(signer != address(0), \\\"GPv2: invalid ecdsa signature\\\");\\n    }\\n\\n    /// @dev Decodes signature bytes originating from an EIP-712-encoded\\n    /// signature.\\n    ///\\n    /// EIP-712 signs typed data. The specifications are described in the\\n    /// related EIP (<https://eips.ethereum.org/EIPS/eip-712>).\\n    ///\\n    /// EIP-712 signatures are encoded as standard ECDSA signatures as described\\n    /// in the corresponding decoding function [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEip712Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        owner = ecdsaRecover(orderDigest, encodedSignature);\\n    }\\n\\n    /// @dev Decodes signature bytes originating from the output of the eth_sign\\n    /// RPC call.\\n    ///\\n    /// The specifications are described in the Ethereum documentation\\n    /// (<https://eth.wiki/json-rpc/API#eth_sign>).\\n    ///\\n    /// eth_sign signatures are encoded as standard ECDSA signatures as\\n    /// described in the corresponding decoding function\\n    /// [`ecdsaRecover`].\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature Calldata pointing to tightly packed signature\\n    /// bytes.\\n    /// @return owner The address of the signer.\\n    function recoverEthsignSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal pure returns (address owner) {\\n        // The signed message is encoded as:\\n        // `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" || length || data`, where\\n        // the length is a constant (32 bytes) and the data is defined as:\\n        // `orderDigest`.\\n        bytes32 ethsignDigest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    orderDigest\\n                )\\n            );\\n\\n        owner = ecdsaRecover(ethsignDigest, encodedSignature);\\n    }\\n\\n    /// @dev Verifies the input calldata as an EIP-1271 contract signature and\\n    /// returns the address of the signer.\\n    ///\\n    /// The encoded signature tightly packs the following struct:\\n    ///\\n    /// ```\\n    /// struct EncodedEip1271Signature {\\n    ///     address owner;\\n    ///     bytes signature;\\n    /// }\\n    /// ```\\n    ///\\n    /// This function enforces that the encoded data stores enough bytes to\\n    /// cover the full length of the decoded signature.\\n    ///\\n    /// @param encodedSignature The encoded EIP-1271 signature.\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @return owner The address of the signer.\\n    function recoverEip1271Signer(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature\\n    ) internal view returns (address owner) {\\n        // NOTE: Use assembly to read the verifier address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        // NOTE: Configure prettier to ignore the following line as it causes\\n        // a panic in the Solidity plugin.\\n        // prettier-ignore\\n        bytes calldata signature = encodedSignature[20:];\\n\\n        require(\\n            EIP1271Verifier(owner).isValidSignature(orderDigest, signature) ==\\n                GPv2EIP1271.MAGICVALUE,\\n            \\\"GPv2: invalid eip1271 signature\\\"\\n        );\\n    }\\n\\n    /// @dev Verifies the order has been pre-signed. The signature is the\\n    /// address of the signer of the order.\\n    ///\\n    /// @param orderDigest The EIP-712 signing digest derived from the order\\n    /// parameters.\\n    /// @param encodedSignature The pre-sign signature reprenting the order UID.\\n    /// @param validTo The order expiry timestamp.\\n    /// @return owner The address of the signer.\\n    function recoverPreSigner(\\n        bytes32 orderDigest,\\n        bytes calldata encodedSignature,\\n        uint32 validTo\\n    ) internal view returns (address owner) {\\n        require(encodedSignature.length == 20, \\\"GPv2: malformed presignature\\\");\\n        // NOTE: Use assembly to read the owner address from the encoded\\n        // signature bytes.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // owner = address(encodedSignature[0:20])\\n            owner := shr(96, calldataload(encodedSignature.offset))\\n        }\\n\\n        bytes memory orderUid = new bytes(GPv2Order.UID_LENGTH);\\n        orderUid.packOrderUidParams(orderDigest, owner, validTo);\\n\\n        require(\\n            preSignature[orderUid] == PRE_SIGNED,\\n            \\\"GPv2: order not presigned\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf5d8191702f70082c41dc3b271ea392bd6f0e7e0c99eedf47918c10c76f8e55d\",\"license\":\"LGPL-3.0-or-later\"},\"src/contracts/mixins/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Vendored from OpenZeppelin contracts with minor modifications:\\n// - Modified Solidity version\\n// - Formatted code\\n// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.4.0/contracts/utils/ReentrancyGuard.sol>\\n\\npragma solidity ^0.7.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb6721e18e5d0ba27f8a6ec04c5b4b5cfe4fb851e85f791728ad531b57bfb867f\",\"license\":\"MIT\"},\"src/contracts/mixins/StorageAccessible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n// Vendored from Gnosis utility contracts with minor modifications:\\n// - Modified Solidity version\\n// - Formatted code\\n// - Added linter directives to ignore low level call and assembly warnings\\n// <https://github.com/gnosis/util-contracts/blob/v3.1.0-solc-7/contracts/StorageAccessible.sol>\\n\\npragma solidity ^0.7.6;\\n\\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions\\ninterface ViewStorageAccessible {\\n    /**\\n     * @dev Same as `simulateDelegatecall` on StorageAccessible. Marked as view so that it can be called from external contracts\\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * @dev Same as `getStorageAt` on StorageAccessible. This method allows reading aribtrary ranges of storage.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\\ncontract StorageAccessible {\\n    /**\\n     * @dev Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length)\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecall(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) public returns (bytes memory response) {\\n        bytes memory innerCall =\\n            abi.encodeWithSelector(\\n                this.simulateDelegatecallInternal.selector,\\n                targetContract,\\n                calldataPayload\\n            );\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (, response) = address(this).call(innerCall);\\n        bool innerSuccess = response[response.length - 1] == 0x01;\\n        setLength(response, response.length - 1);\\n        if (innerSuccess) {\\n            return response;\\n        } else {\\n            revertWith(response);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a delegetecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message\\n     * concatenated with the success flag of the inner call as a last byte.\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateDelegatecallInternal(\\n        address targetContract,\\n        bytes memory calldataPayload\\n    ) external returns (bytes memory response) {\\n        bool success;\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (success, response) = targetContract.delegatecall(calldataPayload);\\n        revertWith(abi.encodePacked(response, success));\\n    }\\n\\n    function revertWith(bytes memory response) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            revert(add(response, 0x20), mload(response))\\n        }\\n    }\\n\\n    function setLength(bytes memory buffer, uint256 length) internal pure {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(buffer, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a674911ee3d98ff3afa9c2b0b98c474604c4821bd5841af22c31849c70066ce\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620053eb380380620053eb83398101604081905262000035916200015b565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6020808301919091527f6c85c0337eba1661327f94f3bf46c8a7f9311a563f4d5c948362567f5d8ed60c828401527ff9446b8e937d86f0bc87cac73923491692b123ca5f8761908494703758206adf606080840191909152466080808501919091523060a08086019190915285518086038201815260c09586019687905280519401939093209052600180556001600160601b031986821b811690925284901b16905281906200010a906200014d565b62000116919062000199565b604051809103906000f08015801562000133573d6000803e3d6000fd5b5060601b6001600160601b03191660e05250620001c69050565b61129e806200414d83390190565b600080604083850312156200016e578182fd5b82516200017b81620001ad565b60208401519092506200018e81620001ad565b809150509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114620001c357600080fd5b50565b60805160a05160601c60c05160601c60e05160601c613f2562000228600039806104c55280610d61528061109052806115f0525080610556528061158b52508061039252806106bc528061099d52508061131e52806123df5250613f256000f3fe6080604052600436106100ec5760003560e01c80639b552cc21161008a578063ed9f35ce11610059578063ed9f35ce14610274578063f698da2514610294578063f84436bd146102a9578063fbfa77cf146102c9576100f3565b80639b552cc2146101ff578063a2a7d51b14610214578063d08d33d114610234578063ec6cb13f14610254576100f3565b80632479fb6e116100c65780632479fb6e1461016557806343218e19146101925780635624b25b146101bf578063845a101f146101df576100f3565b806313d79a0b146100f857806315337bc01461011a5780632335c76b1461013a576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011861011336600461322e565b6102de565b005b34801561012657600080fd5b50610118610135366004613441565b6105c1565b34801561014657600080fd5b5061014f6106ba565b60405161015c91906136ee565b60405180910390f35b34801561017157600080fd5b506101856101803660046134ca565b6106de565b60405161015c91906137f0565b34801561019e57600080fd5b506101b26101ad3660046131a0565b6106fb565b60405161015c919061380d565b3480156101cb57600080fd5b506101b26101da3660046134fd565b610873565b3480156101eb57600080fd5b506101186101fa36600461338e565b6108e9565b34801561020b57600080fd5b5061014f61108e565b34801561022057600080fd5b5061011861022f3660046131ee565b6110b2565b34801561024057600080fd5b5061018561024f3660046134ca565b6110fb565b34801561026057600080fd5b5061011861026f366004613475565b611118565b34801561028057600080fd5b5061011861028f3660046131ee565b6112d7565b3480156102a057600080fd5b5061018561131c565b3480156102b557600080fd5b506101b26102c43660046131a0565b611340565b3480156102d557600080fd5b5061014f611589565b6002600154141561035057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556040517f02cc250d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906302cc250d906103c79033906004016136ee565b60206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190613425565b610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613c78565b60405180910390fd5b6104728160005b60200281019061046d9190613d16565b6115ad565b6000806104838989898989896116ea565b6040517f7d10d11f000000000000000000000000000000000000000000000000000000008152919350915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690637d10d11f906104fa90859060040161370f565b600060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b5050505061053c8360016003811061045d57fe5b61057c73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001682611851565b61058783600261045d565b60405133907f40338ce1a7c49204f0099533b1e9a7ee0a3d261f84974ab7af36105b8c4e9db490600090a250506001805550505050505050565b60006105cd8383611b2f565b5091505073ffffffffffffffffffffffffffffffffffffffff81163314610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613a1b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600284846040516106539291906136c2565b9081526020016040518091039020819055508073ffffffffffffffffffffffffffffffffffffffff167f875b6cb035bbd4ac6500fabc6d1e4ca5bdc58a3e2b424ccb5c24cdbebeb009a984846040516106ad9291906137f9565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b805160208183018101805160028252928201919093012091525481565b606060008373ffffffffffffffffffffffffffffffffffffffff16836040518082805190602001908083835b6020831061076457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101610727565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146107c4576040519150601f19603f3d011682016040523d82523d6000602084013e6107c9565b606091505b50809350819250505061086c82826040516020018083805190602001908083835b6020831061082757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016107ea565b6001836020036101000a03801982511681845116808217855250505050505090500182151560f81b815260010192505050604051602081830303815290604052611bbd565b5092915050565b606060008260200267ffffffffffffffff8111801561089157600080fd5b506040519080825280601f01601f1916602001820160405280156108bc576020820181803683370190505b50905060005b838110156108df57848101546020808302840101526001016108c2565b5090505b92915050565b6002600154141561095b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001556040517f02cc250d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906302cc250d906109d29033906004016136ee565b60206040518083038186803b1580156109ea57600080fd5b505afa1580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190613425565b610a58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613c78565b6000610a62611bc5565b8051909150610a7382868686611bf2565b60007ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677582610100015114610aa8576001610aab565b60005b9050610ab5612f90565b60408085015173ffffffffffffffffffffffffffffffffffffffff90811683526101408501517f4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce9081146020850152606080880151909216928401929092526101608501519091149082015260008667ffffffffffffffff81118015610b3a57600080fd5b50604051908082528060200260200182016040528015610b64578160200160208202803683370190505b50610100850151909150610120870135907ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee3467751415610c30578460800151811015610bda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613c41565b610be78560600151611c90565b82886000013581518110610bf757fe5b602002602001018181525050610c0c81611c90565b60000382886020013581518110610c1f57fe5b602002602001018181525050610cc0565b8460600151811115610c6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613b9c565b610c7781611c90565b82886000013581518110610c8757fe5b602002602001018181525050610ca08560800151611c90565b60000382886020013581518110610cb357fe5b6020026020010181815250505b610cc8612f90565b8660400151816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508560000151816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508560e0015181604001818152505085610140015181606001818152505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634817a286878f8f8f8f8b8b8f60a001518b6040518a63ffffffff1660e01b8152600401610dcc99989796959493929190613877565b600060405180830381600087803b158015610de657600080fd5b505af1158015610dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e4091908101906132ed565b90506000886020015190506000610e6d838c6000013581518110610e6057fe5b6020026020010151611d25565b90506000610e94848d6020013581518110610e8457fe5b6020026020010151600003611d25565b9050600283604051610ea691906136d2565b908152602001604051809103902054600014610eee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613bd3565b7ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee3467758a61010001511415610f825789606001518214610f58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613ac0565b8960600151600284604051610f6d91906136d2565b90815260405190819003602001902055610fe5565b89608001518114610fbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613af7565b8960800151600284604051610fd491906136d2565b908152604051908190036020019020555b8a6040015173ffffffffffffffffffffffffffffffffffffffff167fa07a543ab8a018198e99ca0184c93fe9050a79400a0a723441f84de1d972cc178b600001518c6020015185858f60e001518960405161104596959493929190613820565b60405180910390a260405133907f40338ce1a7c49204f0099533b1e9a7ee0a3d261f84974ab7af36105b8c4e9db490600090a25050600180555050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3033146110eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613b65565b6110f760008383611d96565b5050565b805160208183018101805160008252928201919093012091525481565b60006111248484611b2f565b5091505073ffffffffffffffffffffffffffffffffffffffff811633146111ac57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f475076323a2063616e6e6f74207072657369676e206f72646572000000000000604482015290519081900360640190fd5b8115611206577ff59c009283ff87aa78203fc4d9c2df025ee851130fb69cc3e068941f6b5e2d6f60001c60008585604051808383808284378083019250505092505050908152602001604051809103902081905550611232565b600080858560405180838380828437919091019485525050604051928390036020019092209290925550505b8073ffffffffffffffffffffffffffffffffffffffff167f01bf7c8b0ca55deecbea89d7e58295b7ffbf685fd0d96801034ba8c6ffe1c68d858585604051808060200183151581526020018281038252858582818152602001925080828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201829003965090945050505050a250505050565b303314611310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613b65565b6110f760028383611d96565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060006343218e1960e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156113aa578181015183820152602001611392565b50505050905090810190601f1680156113d75780820380516001836020036101000a031916815260200191505b50604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909816979097178752518151919750309688965090945084935091508083835b602083106114a857805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161146b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d806000811461150a576040519150601f19603f3d011682016040523d82523d6000602084013e61150f565b606091505b5090508092505060008260018451038151811061152857fe5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916600160f81b14905061156b836001855103611e46565b80156115785750506108e3565b61158183611bbd565b505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60005b818110156116e557368383838181106115c557fe5b90506020028101906115d79190613dde565b905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661161d6020830183613184565b73ffffffffffffffffffffffffffffffffffffffff16141561166b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613caf565b61167481611e4a565b6116816020820182613184565b73ffffffffffffffffffffffffffffffffffffffff167fed99827efb37016f2275f98c4bcf71c7551c75d59e9b450f79fa32e60be672c282602001356116c684611ea1565b6040516116d4929190613ce6565b60405180910390a2506001016115b0565b505050565b60608060006116f7611bc5565b90508367ffffffffffffffff8111801561171057600080fd5b5060405190808252806020026020018201604052801561174a57816020015b611737612f90565b81526020019060019003908161172f5790505b5092508367ffffffffffffffff8111801561176457600080fd5b5060405190808252806020026020018201604052801561179e57816020015b61178b612f90565b8152602001906001900390816117835790505b50915060005b8481101561184457368686838181106117b957fe5b90506020028101906117cb9190613e11565b90506117d9838c8c84611bf2565b61183b838a8a84358181106117ea57fe5b905060200201358b8b856020013581811061180157fe5b9050602002013584610120013589878151811061181a57fe5b602002602001015189888151811061182e57fe5b6020026020010151611ecb565b506001016117a4565b5050965096945050505050565b6000815167ffffffffffffffff8111801561186b57600080fd5b506040519080825280602002602001820160405280156118a557816020015b611892612fb7565b81526020019060019003908161188a5790505b5090506000805b8351811015611a935760008482815181106118c357fe5b6020026020010151905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614156119c7577f4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce81606001511415611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613b2e565b8051604080830151905173ffffffffffffffffffffffffffffffffffffffff9092169181156108fc0291906000818181858888f193505050501580156119c1573d6000803e3d6000fd5b50611a8a565b7f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc981606001511415611a2657805160408201516020830151611a219273ffffffffffffffffffffffffffffffffffffffff90911691612216565b611a8a565b6000848480600101955081518110611a3a57fe5b602090810291909101810151600081528382015173ffffffffffffffffffffffffffffffffffffffff90811692820192909252604080850151908201523060608201528351909116608090910152505b506001016118ac565b508015611b2957611aa48282611e46565b6040517f0e8e3e8400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690630e8e3e8490611af690859060040161375d565b600060405180830381600087803b158015611b1057600080fd5b505af1158015611b24573d6000803e3d6000fd5b505050505b50505050565b6000808060388414611ba257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f475076323a20696e76616c696420756964000000000000000000000000000000604482015290519081900360640190fd5b5050823593602084013560601c936034013560e01c92509050565b805160208201fd5b611bcd612fe7565b6040805160388082526060820190925290602082018180368337505050602082015290565b83516000611c02838686856122ee565b9050600080611c1f8484611c1a610140890189613d7b565b6123d6565b91509150611c4282828660a001518b60200151612485909392919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff81166040890152611c688482612507565b73ffffffffffffffffffffffffffffffffffffffff1660609098019790975250505050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115611d2157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53616665436173743a20696e74323536206f766572666c6f7700000000000000604482015290519081900360640190fd5b5090565b600080821215611d2157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53616665436173743a206e6f7420706f73697469766500000000000000000000604482015290519081900360640190fd5b60005b81811015611b2957366000848484818110611db057fe5b9050602002810190611dc29190613d7b565b915091506000611dd28383611b2f565b92505050428163ffffffff1610611e15576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613c0a565b6000878484604051611e289291906136c2565b90815260405190819003602001902055505060019091019050611d99565b9052565b73ffffffffffffffffffffffffffffffffffffffff8135166020820135366000611e776040860186613d7b565b9150915060405181838237600080838387895af1611e99573d6000803e3d6000fd5b505050505050565b60003681611eb26040850185613d7b565b909250905060048110611ec457813592505b5050919050565b8551602087015160a08201514263ffffffff9091161015611f18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613a52565b6080820151611f279087612539565b6060830151611f369089612539565b1015611f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613a89565b6000806000807ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee346775866101000151141561206f5785610120015115611fdb57889350611fd48660600151611fce868960e0015161253990919063ffffffff16565b906125c9565b9150611fea565b856060015193508560e0015191505b611ffe8a611ff8868e612539565b9061264a565b925061202a8460028760405161201491906136d2565b90815260405190819003602001902054906126e8565b9050856060015181111561206a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613bd3565b612116565b856101200151156120a35788925061209c8660800151611fce858960e0015161253990919063ffffffff16565b91506120b2565b856080015192508560e0015191505b6120c08b611fce858d612539565b93506120d68360028760405161201491906136d2565b90508560800151811115612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044d90613bd3565b61212084836126e8565b93508060028660405161213391906136d2565b9081526020016040518091039020819055508b6040015173ffffffffffffffffffffffffffffffffffffffff167fa07a543ab8a018198e99ca0184c93fe9050a79400a0a723441f84de1d972cc17876000015188602001518787878b6040516121a196959493929190613820565b60405180910390a250506040808b015173ffffffffffffffffffffffffffffffffffffffff9081168852855181166020808a0191909152888301949094526101408601516060988901529a8701518b16865282850151909a169185019190915297830197909752610160015191015250505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff84166004830152602482018390529060008060448382895af1612279573d6000803e3d6000fd5b506122838461275c565b611b2957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e736665720000000000000000000000604482015290519081900360640190fd5b6000838386358181106122fd57fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff168452508490849087013581811061233057fe5b73ffffffffffffffffffffffffffffffffffffffff602091820293909301358316908501525060408087013590911690830152606080860135908301526080808601359083015263ffffffff60a080870135919091169083015260c0808601359083015260e080860135908301526123ac610100860135612826565b61016087019190915261014086019190915290151561012085015261010090930152509392505050565b600080612403867f000000000000000000000000000000000000000000000000000000000000000061297b565b9150600085600381111561241357fe5b141561242b57612424828585612a05565b905061247c565b600185600381111561243957fe5b141561244a57612424828585612a1a565b600285600381111561245857fe5b141561246957612424828585612a82565b6124798285858960a00151612c20565b90505b94509492505050565b60388451146124f557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a2075696420627566666572206f766572666c6f7700000000000000604482015290519081900360640190fd5b60388401526034830152602090910152565b604082015160009073ffffffffffffffffffffffffffffffffffffffff166125305750806108e3565b50506040015190565b600082612548575060006108e3565b8282028284828161255557fe5b04146125c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f536166654d6174683a206d756c206f766572666c6f7700000000000000000000604482015290519081900360640190fd5b9392505050565b600080821161263957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f536166654d6174683a206469766973696f6e2062792030000000000000000000604482015290519081900360640190fd5b81838161264257fe5b049392505050565b60008082116126ba57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f536166654d6174683a206365696c696e67206469766973696f6e206279203000604482015290519081900360640190fd5b8183816126c357fe5b06156126d05760016126d3565b60005b60ff168284816126df57fe5b04019392505050565b6000828201838110156125c257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061279a565b7f08c379a0000000000000000000000000000000000000000000000000000000006000526020600452806024528160445260646000fd5b3d80156127d95760208114612813576127d47f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612763565b612820565b823b61280a5761280a7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014612763565b60019150612820565b3d6000803e600051151591505b50919050565b6000808080806001861661285c577ff3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee3467759450612880565b7f6ed88e868af0a1983e3886d5f3e95a2fafbd6c3450bc229e27342283dc429ccc94505b6002861615159350600886166128b8577f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9925061290c565b600486166128e8577fabee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea0632925061290c565b7f4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce92505b6010861661293c577f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc99150612960565b7f4ac99ace14ee0a5ef932dc609df0943ab7ac16b7583634612f8dc35a4289a6ce91505b600586901c600381111561297057fe5b905091939590929450565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910180517fd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e48982526101a0822091526040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000612a12848484612de5565b949350505050565b6000808460405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050612a79818585612de5565b95945050505050565b813560601c366000612a978460148188613e68565b604080517f1626ba7e00000000000000000000000000000000000000000000000000000000808252600482018b81526024830193845260448301859052949650929450919273ffffffffffffffffffffffffffffffffffffffff871692631626ba7e928b928892889290606401848480828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909201965060209550909350505081840390508186803b158015612b5d57600080fd5b505afa158015612b71573d6000803e3d6000fd5b505050506040513d6020811015612b8757600080fd5b50517fffffffff000000000000000000000000000000000000000000000000000000001614612c1757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f475076323a20696e76616c69642065697031323731207369676e617475726500604482015290519081900360640190fd5b50509392505050565b600060148314612c9157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f475076323a206d616c666f726d6564207072657369676e617475726500000000604482015290519081900360640190fd5b506040805160388082526060828101909352853590921c9160009190602082018180368337019050509050612cc881878486612485565b7ff59c009283ff87aa78203fc4d9c2df025ee851130fb69cc3e068941f6b5e2d6f60001c6000826040518082805190602001908083835b60208310612d3c57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612cff565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205414612ddc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206f72646572206e6f74207072657369676e656400000000000000604482015290519081900360640190fd5b50949350505050565b600060418214612e5657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f475076323a206d616c666f726d6564206563647361207369676e617475726500604482015290519081900360640190fd5b604080516000815260208181018084528790528286013560f81c82840181905286356060840181905282880135608085018190529451909493919260019260a0808201937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081019281900390910190855afa158015612ed9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015194505073ffffffffffffffffffffffffffffffffffffffff8416612f8657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f475076323a20696e76616c6964206563647361207369676e6174757265000000604482015290519081900360640190fd5b5050509392505050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b6040518060800160405280612ffa613014565b815260606020820181905260006040830181905291015290565b6040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810182905261016081019190915290565b60008083601f840112613089578182fd5b50813567ffffffffffffffff8111156130a0578182fd5b60208301915083602080830285010111156130ba57600080fd5b9250929050565b60008083601f8401126130d2578182fd5b50813567ffffffffffffffff8111156130e9578182fd5b6020830191508360208285010111156130ba57600080fd5b600082601f830112613111578081fd5b813567ffffffffffffffff81111561312557fe5b61315660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613e44565b81815284602083860101111561316a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613195578081fd5b81356125c281613ebc565b600080604083850312156131b2578081fd5b82356131bd81613ebc565b9150602083013567ffffffffffffffff8111156131d8578182fd5b6131e485828601613101565b9150509250929050565b60008060208385031215613200578182fd5b823567ffffffffffffffff811115613216578283fd5b61322285828601613078565b90969095509350505050565b60008060008060008060006080888a031215613248578283fd5b873567ffffffffffffffff8082111561325f578485fd5b61326b8b838c01613078565b909950975060208a0135915080821115613283578485fd5b61328f8b838c01613078565b909750955060408a01359150808211156132a7578485fd5b6132b38b838c01613078565b909550935060608a01359150808211156132cb578283fd5b508801606081018a10156132dd578182fd5b8091505092959891949750929550565b600060208083850312156132ff578182fd5b825167ffffffffffffffff80821115613316578384fd5b818501915085601f830112613329578384fd5b81518181111561333557fe5b8381029150613345848301613e44565b8181528481019084860184860187018a101561335f578788fd5b8795505b83861015613381578051835260019590950194918601918601613363565b5098975050505050505050565b6000806000806000606086880312156133a5578081fd5b853567ffffffffffffffff808211156133bc578283fd5b6133c889838a01613078565b909750955060208801359150808211156133e0578283fd5b6133ec89838a01613078565b90955093506040880135915080821115613404578283fd5b5086016101608189031215613417578182fd5b809150509295509295909350565b600060208284031215613436578081fd5b81516125c281613ee1565b60008060208385031215613453578182fd5b823567ffffffffffffffff811115613469578283fd5b613222858286016130c1565b600080600060408486031215613489578081fd5b833567ffffffffffffffff81111561349f578182fd5b6134ab868287016130c1565b90945092505060208401356134bf81613ee1565b809150509250925092565b6000602082840312156134db578081fd5b813567ffffffffffffffff8111156134f1578182fd5b612a1284828501613101565b6000806040838503121561350f578182fd5b50508035926020909101359150565b60008284526020808501945082825b8581101561356857813561354081613ebc565b73ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161352d565b509495945050505050565b6000815180845260208085019450808401835b8381101561356857815187529582019590820190600101613586565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b60008151808452613602816020860160208601613e90565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525060408101516040830152606081015160608301525050565b73ffffffffffffffffffffffffffffffffffffffff808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b63ffffffff169052565b6000828483379101908152919050565b600082516136e4818460208701613e90565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156137515761373e838551613634565b928401926080929092019160010161372b565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156137e357815180516004811061379057fe5b85528087015173ffffffffffffffffffffffffffffffffffffffff908116888701528682015187870152606080830151821690870152608091820151169085015260a0909301929085019060010161377a565b5091979650505050505050565b90815260200190565b600060208252612a126020830184866135a2565b6000602082526125c260208301846135ea565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015283608083015260c060a083015261386b60c08301846135ea565b98975050505050505050565b60006101a0820160028c1061388857fe5b8b835260206101a081850152818b83526101c0850190506101c0828d0286010192508c845b8d8110156139b6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe408786030183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618f36030182351261390c578586fd5b8e823501803586528481013585870152604081013560408701526060810135606087015260808101357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1823603018112613964578788fd5b8101803567ffffffffffffffff81111561397c578889fd5b80360383131561398a578889fd5b60a060808901526139a160a08901828985016135a2565b975050509284019250908301906001016138ad565b5050505082810360408401526139cd81898b61351e565b90506139dc6060840188613674565b82810360e08401526139ee8187613573565b9150506139ff6101008301856136b8565b613a0d610120830184613634565b9a9950505050505050505050565b6020808252601f908201527f475076323a2063616c6c657220646f6573206e6f74206f776e206f7264657200604082015260600190565b60208082526013908201527f475076323a206f72646572206578706972656400000000000000000000000000604082015260600190565b6020808252601f908201527f475076323a206c696d6974207072696365206e6f742072657370656374656400604082015260600190565b6020808252601f908201527f475076323a2073656c6c20616d6f756e74206e6f742072657370656374656400604082015260600190565b6020808252601e908201527f475076323a2062757920616d6f756e74206e6f74207265737065637465640000604082015260600190565b6020808252601e908201527f475076323a20756e737570706f7274656420696e7465726e616c204554480000604082015260600190565b60208082526018908201527f475076323a206e6f7420616e20696e746572616374696f6e0000000000000000604082015260600190565b60208082526014908201527f475076323a206c696d697420746f6f2068696768000000000000000000000000604082015260600190565b60208082526012908201527f475076323a206f726465722066696c6c65640000000000000000000000000000604082015260600190565b60208082526017908201527f475076323a206f72646572207374696c6c2076616c6964000000000000000000604082015260600190565b60208082526013908201527f475076323a206c696d697420746f6f206c6f7700000000000000000000000000604082015260600190565b60208082526012908201527f475076323a206e6f74206120736f6c7665720000000000000000000000000000604082015260600190565b6020808252601b908201527f475076323a20666f7262696464656e20696e746572616374696f6e0000000000604082015260600190565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260400190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613d4a578283fd5b83018035915067ffffffffffffffff821115613d64578283fd5b60209081019250810236038213156130ba57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613daf578283fd5b83018035915067ffffffffffffffff821115613dc9578283fd5b6020019150368190038213156130ba57600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181126136e4578182fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea18336030181126136e4578182fd5b60405181810167ffffffffffffffff81118282101715613e6057fe5b604052919050565b60008085851115613e77578182fd5b83861115613e83578182fd5b5050820193919092039150565b60005b83811015613eab578181015183820152602001613e93565b83811115611b295750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114613ede57600080fd5b50565b8015158114613ede57600080fdfea2646970667358221220de5e493c48a3b42da03a5db89085177b8d8ccec6e9bf6e8e48b3809343624c8f64736f6c6343000706003360c060405234801561001057600080fd5b5060405161129e38038061129e83398101604081905261002f9161004b565b33606090811b6080521b6001600160601b03191660a052610079565b60006020828403121561005c578081fd5b81516001600160a01b0381168114610072578182fd5b9392505050565b60805160601c60a05160601c6111ee6100b060003980610130528061020152806102bd5250806093528061024c52506111ee6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634817a2861461003b5780637d10d11f14610064575b600080fd5b61004e610049366004610cd9565b610079565b60405161005b9190610eb3565b60405180910390f35b610077610072366004610c69565b610234565b005b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146100f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea906110e5565b60405180910390fd5b6040517f945bcec900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063945bcec990610171908c908c908c908c908c908c908c90600401610f59565b600060405180830381600087803b15801561018b57600080fd5b505af115801561019f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526101e59190810190610bd9565b905061022873ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001683336102e9565b98975050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea906110e5565b6102e573ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016838333610551565b5050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee61030e6040840160208501610bb6565b73ffffffffffffffffffffffffffffffffffffffff16141561035c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea9061111c565b7f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9826060013514156103d0576103cb6103986020840184610bb6565b82604085018035906103ad9060208801610bb6565b73ffffffffffffffffffffffffffffffffffffffff16929190610816565b61054c565b604080516001808252818301909252600091816020015b6103ef6109cb565b8152602001906001900390816103e757905050905060008160008151811061041357fe5b602002602001015190507fabee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea063284606001351461044f576002610452565b60035b8190600381111561045f57fe5b9081600381111561046c57fe5b90525061047f6040850160208601610bb6565b73ffffffffffffffffffffffffffffffffffffffff16602080830191909152604080860135908301526104b490850185610bb6565b73ffffffffffffffffffffffffffffffffffffffff908116606083015283811660808301526040517f0e8e3e8400000000000000000000000000000000000000000000000000000000815290861690630e8e3e8490610517908590600401610ec6565b600060405180830381600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b5050505050505b505050565b60008267ffffffffffffffff8111801561056a57600080fd5b506040519080825280602002602001820160405280156105a457816020015b6105916109cb565b8152602001906001900390816105895790505b5090506000805b8481101561077857368686838181106105c057fe5b60800291909101915073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee90506105f06040830160208401610bb6565b73ffffffffffffffffffffffffffffffffffffffff16141561063e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ea9061111c565b7f5a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc9816060013514156106945761068f61067a6020830183610bb6565b86604084018035906103ad9060208701610bb6565b61076f565b60008484806001019550815181106106a857fe5b602002602001015190507fabee3b73373acd583a130924aad6dc38cfdc44ba0555ba94ce2ff63980ea06328260600135146106e45760016106e7565b60035b819060038111156106f457fe5b9081600381111561070157fe5b9052506107146040830160208401610bb6565b73ffffffffffffffffffffffffffffffffffffffff166020808301919091526040808401359083015261074990830183610bb6565b73ffffffffffffffffffffffffffffffffffffffff908116606083015286166080909101525b506001016105ab565b50801561080e5761078982826108fd565b6040517f0e8e3e8400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690630e8e3e84906107db908590600401610ec6565b600060405180830381600087803b1580156107f557600080fd5b505af1158015610809573d6000803e3d6000fd5b505050505b505050505050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af1610881573d6000803e3d6000fd5b5061088b85610901565b6108f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015290519081900360640190fd5b5050505050565b9052565b600061093f565b7f08c379a0000000000000000000000000000000000000000000000000000000006000526020600452806024528160445260646000fd5b3d801561097e57602081146109b8576109797f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f610908565b6109c5565b823b6109af576109af7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014610908565b600191506109c5565b3d6000803e600051151591505b50919050565b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b600082601f830112610a0b578081fd5b81356020610a20610a1b83611175565b611151565b8281528181019085830183850287018401881015610a3c578586fd5b855b85811015610a63578135610a5181611193565b84529284019290840190600101610a3e565b5090979650505050505050565b600082601f830112610a80578081fd5b81356020610a90610a1b83611175565b8281528181019085830183850287018401881015610aac578586fd5b855b85811015610a6357813584529284019290840190600101610aae565b60008083601f840112610adb578182fd5b50813567ffffffffffffffff811115610af2578182fd5b6020830191508360208083028501011115610b0c57600080fd5b9250929050565b80358015158114610b2357600080fd5b919050565b6000608082840312156109c5578081fd5b600060808284031215610b4a578081fd5b6040516080810181811067ffffffffffffffff82111715610b6757fe5b6040529050808235610b7881611193565b8152610b8660208401610b13565b60208201526040830135610b9981611193565b6040820152610baa60608401610b13565b60608201525092915050565b600060208284031215610bc7578081fd5b8135610bd281611193565b9392505050565b60006020808385031215610beb578182fd5b825167ffffffffffffffff811115610c01578283fd5b8301601f81018513610c11578283fd5b8051610c1f610a1b82611175565b8181528381019083850185840285018601891015610c3b578687fd5b8694505b83851015610c5d578051835260019490940193918501918501610c3f565b50979650505050505050565b60008060208385031215610c7b578081fd5b823567ffffffffffffffff80821115610c92578283fd5b818501915085601f830112610ca5578283fd5b813581811115610cb3578384fd5b866020608083028501011115610cc7578384fd5b60209290920196919550909350505050565b6000806000806000806000806101a0898b031215610cf5578384fd5b883560028110610d03578485fd5b9750602089013567ffffffffffffffff80821115610d1f578586fd5b610d2b8c838d01610aca565b909950975060408b0135915080821115610d43578586fd5b610d4f8c838d016109fb565b9650610d5e8c60608d01610b39565b955060e08b0135915080821115610d73578485fd5b50610d808b828c01610a70565b9350506101008901359150610d998a6101208b01610b28565b90509295985092959890939650565b6000815180845260208085019450808401835b83811015610ded57815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610dbb565b509495945050505050565b6000815180845260208085019450808401835b83811015610ded57815187529582019590820190600101610e0b565b600082845282826020860137806020848601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011685010190509392505050565b73ffffffffffffffffffffffffffffffffffffffff808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b600060208252610bd26020830184610df8565b602080825282518282018190526000919060409081850190868401855b82811015610f4c578151805160048110610ef957fe5b85528087015173ffffffffffffffffffffffffffffffffffffffff908116888701528682015187870152606080830151821690870152608091820151169085015260a09093019290850190600101610ee3565b5091979650505050505050565b600061012080830160028b10610f6b57fe5b8a8452602080850192909252889052610140808401918981028501909101908a845b8b811015611098577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec087850301855281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff618e3603018112610fed578687fd5b8d01803585528381013584860152604080820135908601526060808201359086015260a0608080830135368490037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe101811261104757898afd5b8301803567ffffffffffffffff81111561105f578a8bfd5b80360385131561106d578a8bfd5b83838a0152611081848a01828a8501610e27565b998801999850505093850193505050600101610f8d565b50505083810360408501526110ad8189610da8565b9150506110bd6060840187610e6f565b82810360e08401526110cf8186610df8565b9150508261010083015298975050505050505050565b60208082526011908201527f475076323a206e6f742063726561746f72000000000000000000000000000000604082015260600190565b6020808252818101527f475076323a2063616e6e6f74207472616e73666572206e617469766520455448604082015260600190565b60405181810167ffffffffffffffff8111828210171561116d57fe5b604052919050565b600067ffffffffffffffff82111561118957fe5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146111b557600080fd5b5056fea2646970667358221220364a6941bea69620b7dc3a957d0ab4cbf3bfc459c7ad3924d220620aca9202fc64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Gnosis Developers",
    "events": {
      "Interaction(address,uint256,bytes4)": {
        "details": "Event emitted for each executed interaction. For gas effeciency, only the interaction calldata selector (first 4 bytes) is included in the event. For interactions without calldata or whose calldata is shorter than 4 bytes, the selector will be `0`."
      },
      "OrderInvalidated(address,bytes)": {
        "details": "Event emitted when an order is invalidated."
      },
      "Settlement(address)": {
        "details": "Event emitted when a settlement complets"
      },
      "Trade(address,address,address,uint256,uint256,uint256,bytes)": {
        "details": "Event emitted for each executed trade."
      }
    },
    "kind": "dev",
    "methods": {
      "freeFilledAmountStorage(bytes[])": {
        "details": "Free storage from the filled amounts of **expired** orders to claim a gas refund. This method can only be called as an interaction.",
        "params": {
          "orderUids": "The unique identifiers of the expired order to free storage for."
        }
      },
      "freePreSignatureStorage(bytes[])": {
        "details": "Free storage from the pre signatures of **expired** orders to claim a gas refund. This method can only be called as an interaction.",
        "params": {
          "orderUids": "The unique identifiers of the expired order to free storage for."
        }
      },
      "getStorageAt(uint256,uint256)": {
        "details": "Reads `length` bytes of storage in the currents contract",
        "params": {
          "length": "- the number of words (32 bytes) of data to read",
          "offset": "- the offset in the current contract's storage in words to start reading from"
        },
        "returns": {
          "_0": "the bytes that were read."
        }
      },
      "invalidateOrder(bytes)": {
        "details": "Invalidate onchain an order that has been signed offline.",
        "params": {
          "orderUid": "The unique identifier of the order that is to be made invalid after calling this function. The user that created the order must be the the sender of this message. See [`extractOrderUidParams`] for details on orderUid."
        }
      },
      "setPreSignature(bytes,bool)": {
        "details": "Sets a presignature for the specified order UID.",
        "params": {
          "orderUid": "The unique identifier of the order to pre-sign."
        }
      },
      "settle(address[],uint256[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,bytes)[],(address,uint256,bytes)[][3])": {
        "details": "Settle the specified orders at a clearing price. Note that it is the responsibility of the caller to ensure that all GPv2 invariants are upheld for the input settlement, otherwise this call will revert. Namely: - All orders are valid and signed - Accounts have sufficient balance and approval. - Settlement contract has sufficient balance to execute trades. Note   this implies that the accumulated fees held in the contract can also   be used for settlement. This is OK since:   - Solvers need to be authorized   - Misbehaving solvers will be slashed for abusing accumulated fees for     settlement   - Critically, user orders are entirely protected",
        "params": {
          "clearingPrices": "An array of clearing prices where the `i`-th price is for the `i`-th token in the [`tokens`] array.",
          "interactions": "Smart contract interactions split into three separate lists to be run before the settlement, during the settlement and after the settlement respectively.",
          "tokens": "An array of ERC20 tokens to be traded in the settlement. Trades encode tokens as indices into this array.",
          "trades": "Trades for signed orders."
        }
      },
      "simulateDelegatecall(address,bytes)": {
        "details": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.",
        "params": {
          "calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "targetContract": "Address of the contract containing the code to execute."
        }
      },
      "simulateDelegatecallInternal(address,bytes)": {
        "details": "Performs a delegetecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). Returns encoded result as revert message concatenated with the success flag of the inner call as a last byte.",
        "params": {
          "calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
          "targetContract": "Address of the contract containing the code to execute."
        }
      },
      "swap((bytes32,uint256,uint256,uint256,bytes)[],address[],(uint256,uint256,address,uint256,uint256,uint32,bytes32,uint256,uint256,uint256,bytes))": {
        "details": "Settle an order directly against Balancer V2 pools.",
        "params": {
          "swaps": "The Balancer V2 swap steps to use for trading.",
          "tokens": "An array of ERC20 tokens to be traded in the settlement. Swaps and the trade encode tokens as indices into this array.",
          "trade": "The trade to match directly against Balancer liquidity. The order will always be fully executed, so the trade's `executedAmount` field is used to represent a swap limit amount."
        }
      }
    },
    "stateVariables": {
      "authenticator": {
        "details": "The authenticator is used to determine who can call the settle function. That is, only authorised solvers have the ability to invoke settlements. Any valid authenticator implements an isSolver method called by the onlySolver modifier below."
      },
      "filledAmount": {
        "details": "Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed."
      },
      "vault": {
        "details": "The Balancer Vault the protocol uses for managing user funds."
      },
      "vaultRelayer": {
        "details": "The Balancer Vault relayer which can interact on behalf of users. This contract is created during deployment"
      }
    },
    "title": "Gnosis Protocol v2 Settlement Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2808,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "preSignature",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 3292,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 218,
        "contract": "src/contracts/GPv2Settlement.sol:GPv2Settlement",
        "label": "filledAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}